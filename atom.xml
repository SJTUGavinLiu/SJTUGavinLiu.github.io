<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gavin的碎碎念~</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="SJTUGavinLiu.github.io/"/>
  <updated>2020-02-16T15:46:22.968Z</updated>
  <id>SJTUGavinLiu.github.io/</id>
  
  <author>
    <name>Gavin Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode218</title>
    <link href="SJTUGavinLiu.github.io/2020/02/16/leetcode218/"/>
    <id>SJTUGavinLiu.github.io/2020/02/16/leetcode218/</id>
    <published>2020-02-16T15:45:05.000Z</published>
    <updated>2020-02-16T15:46:22.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="天际线问题"><a href="#天际线问题" class="headerlink" title="天际线问题"></a>天际线问题</h1><p>城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线（图B）。</p><p><img src="/images/leetcode218.assets/1581677956842.png" alt="天际线"></p><p>每个建筑物的几何信息用三元组 $[L_i，R_i，H_i]$ 表示，其中 $L_i$ 和 $R_i$ 分别是第 $i$ 座建筑物左右边缘的 x 坐标，$H_i$ 是其高度。可以保证 $0 ≤ L_i$, $R_i ≤ INT_MAX$, $0 &lt; H_i ≤ INT_MAX$ 和 $R_i - L_i &gt; 0$。您可以假设所有建筑物都是在绝对平坦且高度为 0 的表面上的完美矩形。</p><p>例如，图A中所有建筑物的尺寸记录为：[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] 。</p><p>输出是以 $[ [x_1,y_1], [x_2, y_2], [x_3, y_3], … ]$ 格式的“关键点”（图B中的红点）的列表，它们唯一地定义了天际线。关键点是水平线段的左端点。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。</p><p>例如，图B中的天际线应该表示为：[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]。</p><p>说明:</p><p>任何输入列表中的建筑物数量保证在 [0, 10000] 范围内。<br>输入列表已经按左 x 坐标 Li  进行升序排列。<br>输出列表必须按 x 位排序。<br>输出天际线中不得有连续的相同高度的水平线。例如 […[2 3], [4 5], [7 5], [11 5], [12 7]…] 是不正确的答案；三条高度为 5 的线应该在最终输出中合并为一个：[…[2 3], [4 5], [12 7], …]</p><hr><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>这道题让我联想到了上个学期OS课写的连续内存分配，当时我是用的双向链表来维护内存空间。没有采用线性表是为了更方便调试（<del>就是懒没错</del>），印象中室友写了个线性表就因为一个小问题花了好多时间来debug(雾。</p><p>言归正传，这道题也可以利用同样的思想来维护一段空间，我们用如下的数据结构来表示每一个独立区间（所谓独立区间就是与其相邻区间高度不同的区间）。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> height;</span><br><span class="line">    <span class="hljs-keyword">int</span> left;</span><br><span class="line">    <span class="hljs-keyword">int</span> right;</span><br><span class="line">    Node* next;</span><br><span class="line">    Node* pre;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPoint</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> left == right;</span><br><span class="line">    &#125;</span><br><span class="line">    Node(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j): left(i), right(j),height(<span class="hljs-number">0</span>) &#123;&#125;</span><br><span class="line">    Node(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> h): left(i), right(j),height(h) &#123;&#125;</span><br><span class="line">    Node(<span class="hljs-keyword">int</span> h): left(<span class="hljs-literal">NULL</span>), right(<span class="hljs-literal">NULL</span>), height(h) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始区间为<code>[INT_MIN, INT_MAX]</code>，其高度为0。之后每加入一个新的建筑，都要更新一次区间。区间更新逻辑如下</p><ol><li>新加入建筑物的高度小于等于其覆盖到区间的高度，不产生影响。</li><li>新加入建筑物的高度大于其覆盖区间的高度，则将覆盖区间的高度更新为新建筑的高度。</li></ol><p>由于并不是所有的区间都是恰好被新加入的建筑物覆盖的，因此我们还考虑区间的拆分问题。</p><p>对于上面的这些问题，我的思路如下</p><ol><li>先确定新建筑物波及的区间。</li><li>对头区间和尾区间进行特殊处理（因为只有头尾区间才会面临区间拆分的可能性）</li><li>对头尾之间的其他区间进行同高度合并。</li></ol><p>具体实现在如下代码中，关键步骤有注释</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span></span><br><span class="line">    <span class="hljs-keyword">int</span> height;</span><br><span class="line">    <span class="hljs-keyword">int</span> left;</span><br><span class="line">    <span class="hljs-keyword">int</span> right;</span><br><span class="line">    Node* next;</span><br><span class="line">    Node* pre;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPoint</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> left == right;</span><br><span class="line">    &#125;</span><br><span class="line">    Node(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j): left(i), right(j),height(<span class="hljs-number">0</span>) &#123;&#125;</span><br><span class="line">    Node(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> h): left(i), right(j),height(h) &#123;&#125;</span><br><span class="line">    Node(<span class="hljs-keyword">int</span> h): left(<span class="hljs-literal">NULL</span>), right(<span class="hljs-literal">NULL</span>), height(h) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 在left，right间加入cur</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">(Node* left, Node* right, Node* cur)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    left-&gt;next = cur;</span><br><span class="line">    cur-&gt;next = right;</span><br><span class="line">    right-&gt;pre = cur;</span><br><span class="line">    cur-&gt;pre = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 删除结点cur</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteNode</span><span class="hljs-params">(Node*cur)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    cur-&gt;pre-&gt;next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next-&gt;pre = cur-&gt;pre;</span><br><span class="line">    <span class="hljs-keyword">delete</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//向左合并，直到遇到头节点或者高度不同的区间</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">leftMerge</span><span class="hljs-params">(Node* cur)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Node* pre = cur-&gt;pre;</span><br><span class="line">    <span class="hljs-keyword">while</span>(pre-&gt;height != <span class="hljs-number">-1</span> &amp;&amp; pre-&gt;height == cur-&gt;height)</span><br><span class="line">    &#123;</span><br><span class="line">        cur-&gt;left = pre-&gt;left;</span><br><span class="line">        deleteNode(pre);</span><br><span class="line">        pre = cur-&gt;pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//向右合并，直到遇到尾节点或者高度不同的区间</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">rightMerge</span><span class="hljs-params">(Node* cur)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    Node* next = cur-&gt;next;</span><br><span class="line">    <span class="hljs-keyword">while</span>(next-&gt;height != <span class="hljs-number">-1</span> &amp;&amp; next-&gt;height == cur-&gt;height)</span><br><span class="line">    &#123;</span><br><span class="line">        cur-&gt;right = next-&gt;right;</span><br><span class="line">        deleteNode(next);</span><br><span class="line">        next = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; getSkyline(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; buildings) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(buildings.empty())   <span class="hljs-keyword">return</span> &#123;&#125;;</span><br><span class="line">        Node* head = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">-1</span>);</span><br><span class="line">        Node* tail = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">-1</span>);</span><br><span class="line">        Node* tmp = <span class="hljs-keyword">new</span> Node(INT_MIN, INT_MAX);</span><br><span class="line">        connect(head,tail,tmp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; b: buildings)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> left = b[<span class="hljs-number">0</span>];</span><br><span class="line">            <span class="hljs-keyword">int</span> right = b[<span class="hljs-number">1</span>];</span><br><span class="line">            <span class="hljs-keyword">int</span> height = b[<span class="hljs-number">2</span>];</span><br><span class="line"></span><br><span class="line">            Node* cur = head-&gt;next;</span><br><span class="line">            <span class="hljs-keyword">while</span>(cur != tail)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(left &gt;= cur-&gt;right)  </span><br><span class="line">                &#123;</span><br><span class="line">                    cur = cur-&gt;next;</span><br><span class="line">                    <span class="hljs-keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span>    <span class="hljs-comment">//找到头区间</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-keyword">if</span>(right &lt;= cur-&gt;right) <span class="hljs-comment">// 若新加入区间正好落在头区间内</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="hljs-keyword">if</span>(height &gt; cur-&gt;height)</span><br><span class="line">                        &#123;</span><br><span class="line">                            Node* tmp1 = <span class="hljs-keyword">new</span> Node(left,right,height);</span><br><span class="line">                            Node* tmp2 = <span class="hljs-literal">NULL</span>;</span><br><span class="line">                            <span class="hljs-keyword">if</span>(cur-&gt;right != right)</span><br><span class="line">                                tmp2 = <span class="hljs-keyword">new</span> Node(right, cur-&gt;right,cur-&gt;height);</span><br><span class="line">                            cur-&gt;right = left;</span><br><span class="line">                            connect(cur, cur-&gt;next, tmp1);</span><br><span class="line">                            <span class="hljs-keyword">if</span>(tmp2)</span><br><span class="line">                                connect(tmp1,tmp1-&gt;next,tmp2);</span><br><span class="line">                            <span class="hljs-keyword">if</span>(cur-&gt;isPoint())  deleteNode(cur);</span><br><span class="line">                            leftMerge(tmp1);    </span><br><span class="line">                            rightMerge(tmp1);</span><br><span class="line">                            <span class="hljs-comment">//左右合并相同高度的区间</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        Node* h = cur;  <span class="hljs-comment">//头区间</span></span><br><span class="line">                        Node* t = cur-&gt;next;    <span class="hljs-comment">// 确定尾区间</span></span><br><span class="line">                        <span class="hljs-keyword">while</span>(t-&gt;right &lt; right)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="hljs-keyword">if</span>(height &gt; t-&gt;height)</span><br><span class="line">                                t-&gt;height = height;</span><br><span class="line">                            t = t-&gt;next;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="hljs-comment">// 单独处理头区间</span></span><br><span class="line">                        <span class="hljs-keyword">if</span>(h-&gt;height &lt; height)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="hljs-keyword">if</span>(h-&gt;left == left) <span class="hljs-comment">// 新建筑物左侧与头区间左侧重合</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                h-&gt;height = height;</span><br><span class="line">                                leftMerge(h);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="hljs-keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                Node* tmp = <span class="hljs-keyword">new</span> Node(left,h-&gt;right, height);</span><br><span class="line">                                h-&gt;right = left;</span><br><span class="line">                                connect(h,h-&gt;next,tmp);</span><br><span class="line">                                h = tmp;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="hljs-comment">//单独处理尾区间</span></span><br><span class="line">                        <span class="hljs-keyword">if</span>(t-&gt;height &lt; height)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="hljs-keyword">if</span>(t-&gt;right == right)   <span class="hljs-comment">// 新建筑物右侧与尾区间左侧重合</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                t-&gt;height= height;</span><br><span class="line">                                rightMerge(t);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="hljs-keyword">else</span></span><br><span class="line">                            &#123;</span><br><span class="line">                                Node* tmp = <span class="hljs-keyword">new</span> Node(right, t-&gt;right, t-&gt;height);</span><br><span class="line">                                t-&gt;right = right;</span><br><span class="line">                                t-&gt;height = height;</span><br><span class="line">                                connect(t,t-&gt;next,tmp);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="hljs-comment">// 合并头尾区间之间的同高度区间</span></span><br><span class="line">                        Node* p = h;</span><br><span class="line">                        <span class="hljs-keyword">int</span> temp = t-&gt;right;</span><br><span class="line">                        <span class="hljs-keyword">while</span>(p!=tail &amp;&amp; p-&gt;right &lt;= temp)</span><br><span class="line">                        &#123;</span><br><span class="line">                            rightMerge(p);</span><br><span class="line">                            p = p-&gt;next;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="hljs-keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;</span><br><span class="line">        Node* p = head-&gt;next;</span><br><span class="line">        <span class="hljs-keyword">if</span>(p-&gt;height != <span class="hljs-number">0</span>)  <span class="hljs-comment">// INT_MIN也被建筑物覆盖的情况</span></span><br><span class="line">            res.push_back(&#123;p-&gt;left, p-&gt;height&#125;);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">while</span>(p != tail)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            res.push_back(&#123;p-&gt;left, p-&gt;height&#125;);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// INT_MAX也被建筑物覆盖的情况</span></span><br><span class="line">        p = p-&gt;pre;</span><br><span class="line">        <span class="hljs-keyword">if</span>(p-&gt;height != <span class="hljs-number">0</span> &amp;&amp; p-&gt;right == INT_MAX)</span><br><span class="line">            res.push_back(&#123;INT_MAX,<span class="hljs-number">0</span>&#125;);</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这个方法最坏情况的时间复杂度是$O(n^2)$（建筑物序列按左坐标升序排列且不重合）。但在通常情况下，由于建筑物重合的缘故，区间的数目会处在一个比较低的水平，对于处理实际问题来说也不失为一个好的方法。最终leetcode执行用时20ms,击败100%用户；内存消耗13.8MB，击败99.11%用户也证明了这一点。</p></blockquote><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><p>接下来我们来换一种思路，先来考虑一下关键点生成的条件。我们知道由于建筑物重合的缘故，每一个坐标可能被多个建筑物覆盖，我们在这点上看到的天际线正是这些建筑物中最高的那一个产生的。为了便于表述我们将坐标<code>i</code>处的天际线高度记为<code>h[i]</code>。从左至右遍历每一个坐标，当<code>h[i]</code>改变了，关键点就产生了。</p><p>根据这个思路我们不难想到可以用堆来维护加入建筑物左右两侧的高度（对应c++中的<code>multiset</code>）。特别注意，为了区分左右两侧，建筑物的左侧高度用负数表示，右侧高度用正数表示。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; getSkyline(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; buildings) &#123;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;&gt; new_set;</span><br><span class="line">        <span class="hljs-built_in">multiset</span>&lt;<span class="hljs-keyword">int</span>&gt; height;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; b: buildings)</span><br><span class="line">        &#123;</span><br><span class="line">            new_set.push_back(&#123;b[<span class="hljs-number">0</span>], -b[<span class="hljs-number">2</span>]&#125;);   </span><br><span class="line">            new_set.push_back(&#123;b[<span class="hljs-number">1</span>], b[<span class="hljs-number">2</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sort(new_set.begin(), new_set.end());</span><br><span class="line">        height.insert(<span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">int</span> pre = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> line: new_set)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(line.second &lt; <span class="hljs-number">0</span>) height.insert(-line.second);</span><br><span class="line">            <span class="hljs-keyword">else</span>    height.erase(height.find(line.second));</span><br><span class="line">            cur = *height.rbegin();</span><br><span class="line">            <span class="hljs-keyword">if</span>(cur != pre)  <span class="hljs-comment">//转折点</span></span><br><span class="line">            &#123;</span><br><span class="line">                res.push_back(&#123;line.first, cur&#125;);</span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p>用<a href="http://www.gavinld.com/2020/02/16/线段树/" target="_blank" rel="noopener">线段树</a>处理区间问题是一个好的思路。具体的实现思路如下</p><ol><li><p>离散化坐标，建立新坐标和原坐标之间的映射。</p></li><li><p>延迟更新思路-当节点对应的区间落入待更新的区间中对该节点的高度进行更新，其子节点延迟更新。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> tl, <span class="hljs-keyword">int</span> tr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> height)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(l &gt; tr || r &lt; tl)    <span class="hljs-keyword">return</span>;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r)<span class="hljs-comment">//节点对应的区间落入待更新的区间中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(height &gt; Tree[root].height)</span><br><span class="line">            Tree[root].height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> mid = (tl + tr) / <span class="hljs-number">2</span>;</span><br><span class="line">        update(<span class="hljs-number">2</span>*root, tl, mid, l, r, height);</span><br><span class="line">        update(<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>, mid+<span class="hljs-number">1</span>, tr, l, r, height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关键点的导出，为了方便起见我们只考虑叶子节点。同时因为我们的更新思路是带延迟的，还要记得先对探索到的中间节点执行更新下达操作。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryRes</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; res, <span class="hljs-keyword">int</span> root)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(Tree[root].isLeaf)<span class="hljs-comment">// 叶子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(res.empty() || res.back()[<span class="hljs-number">1</span>] != Tree[root].height)<span class="hljs-comment">//和前一个小区间高度不同，关键点出现！</span></span><br><span class="line">            res.push_back(&#123;Tree[root].left, Tree[root].height&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(Tree[root].height &gt; <span class="hljs-number">0</span>)<span class="hljs-comment">//下达更新</span></span><br><span class="line">        &#123;</span><br><span class="line">            Tree[<span class="hljs-number">2</span>*root].height = max(Tree[<span class="hljs-number">2</span>*root].height, Tree[root].height);</span><br><span class="line">            Tree[<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>].height = max(Tree[<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>].height, Tree[root].height);</span><br><span class="line">        &#125;</span><br><span class="line">        queryRes(res, <span class="hljs-number">2</span>*root);</span><br><span class="line">        queryRes(res, <span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>完整代码如下</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    Node* Tree;</span><br><span class="line">    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; dict1;   <span class="hljs-comment">// 实际坐标-&gt;新坐标</span></span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; dict2;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-comment">//cout &lt;&lt; root &lt;&lt; '\t' &lt;&lt; l &lt;&lt; '\t' &lt;&lt; r &lt;&lt; endl;</span></span><br><span class="line">        <span class="hljs-comment">//cout &lt;&lt; Tree[root].left &lt;&lt; endl;</span></span><br><span class="line">        <span class="hljs-keyword">if</span>(l &gt; r)   <span class="hljs-keyword">return</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            Tree[root].left = dict2[l];</span><br><span class="line">            Tree[root].isLeaf = <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>;</span><br><span class="line">            build(root*<span class="hljs-number">2</span>, l, mid);</span><br><span class="line">            build(root*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> tl, <span class="hljs-keyword">int</span> tr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> height)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(l &gt; tr || r &lt; tl)    <span class="hljs-keyword">return</span>;</span><br><span class="line">        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(height &gt; Tree[root].height)</span><br><span class="line">                Tree[root].height = height;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> mid = (tl + tr) / <span class="hljs-number">2</span>;</span><br><span class="line">            update(<span class="hljs-number">2</span>*root, tl, mid, l, r, height);</span><br><span class="line">            update(<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>, mid+<span class="hljs-number">1</span>, tr, l, r, height);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryRes</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; res, <span class="hljs-keyword">int</span> root)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(Tree[root].isLeaf)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(res.empty() || res.back()[<span class="hljs-number">1</span>] != Tree[root].height)</span><br><span class="line">                res.push_back(&#123;Tree[root].left, Tree[root].height&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(Tree[root].height &gt; <span class="hljs-number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Tree[<span class="hljs-number">2</span>*root].height = max(Tree[<span class="hljs-number">2</span>*root].height, Tree[root].height);</span><br><span class="line">                Tree[<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>].height = max(Tree[<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>].height, Tree[root].height);</span><br><span class="line">            &#125;</span><br><span class="line">            queryRes(res, <span class="hljs-number">2</span>*root);</span><br><span class="line">            queryRes(res, <span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; getSkyline(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; buildings) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(buildings.empty())   <span class="hljs-keyword">return</span> &#123;&#125;;</span><br><span class="line">        <span class="hljs-built_in">set</span>&lt;<span class="hljs-keyword">int</span>&gt; st;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; b: buildings)</span><br><span class="line">        &#123;</span><br><span class="line">            st.insert(b[<span class="hljs-number">0</span>]);</span><br><span class="line">            st.insert(b[<span class="hljs-number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 离散化并建立映射</span></span><br><span class="line">        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> iter = st.begin(); iter != st.end(); iter++)</span><br><span class="line">        &#123;</span><br><span class="line">            dict2.push_back(*iter);</span><br><span class="line">            dict1[*iter] = cnt++; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Tree = <span class="hljs-keyword">new</span> Node[<span class="hljs-number">4</span>*cnt];</span><br><span class="line"></span><br><span class="line">        build(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, cnt<span class="hljs-number">-1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; b: buildings)</span><br><span class="line">            update(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, cnt<span class="hljs-number">-1</span>, dict1[b[<span class="hljs-number">0</span>]], dict1[b[<span class="hljs-number">1</span>]]<span class="hljs-number">-1</span>, b[<span class="hljs-number">2</span>]);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        queryRes(res, <span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;天际线问题&quot;&gt;&lt;a href=&quot;#天际线问题&quot; class=&quot;headerlink&quot; title=&quot;天际线问题&quot;&gt;&lt;/a&gt;天际线问题&lt;/h1&gt;&lt;p&gt;城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上显示的所有建
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="双向链表" scheme="SJTUGavinLiu.github.io/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
      <category term="线段树" scheme="SJTUGavinLiu.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="扫描线" scheme="SJTUGavinLiu.github.io/tags/%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
    
      <category term="堆" scheme="SJTUGavinLiu.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>线段树</title>
    <link href="SJTUGavinLiu.github.io/2020/02/16/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>SJTUGavinLiu.github.io/2020/02/16/%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2020-02-16T15:43:35.000Z</published>
    <updated>2020-02-16T15:44:26.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="线段树的结构"><a href="#线段树的结构" class="headerlink" title="线段树的结构"></a>线段树的结构</h2><p>线段树（segment tree），顾名思义， 是用来存放给定区间（segment, or interval）内对应信息的一种数据结构。考虑一个长度为<code>N</code>的数组<code>A</code>和一棵对应的线段树<code>T</code>。</p><ol><li>树<code>T</code>的根节点代表整个数组<code>A[0:N-1]</code></li><li>树<code>T</code>的每一个叶子代表数组内的每个独立元素。</li><li>树<code>T</code>的内部节点代表数组<code>A</code>的子区间<code>A[i:j]</code>($0 \leq i &lt; j &lt;  N$)</li></ol><p>从根节点开始，我们依次将区间对半拆分，即可得到对应的线段树,不难看出线段树的高度为$\log_2N$。一旦线段树建立了，它的结构就不再会变化了。它提供两个基本操作</p><ol><li>Update：更新线段树</li><li>Query：访问一个区间并返回区间对应的属性，如最小值，最大值，总和等。</li></ol><p><img src="/images/线段树.assets/1581778399184.png" alt="线段树样例"></p><p>线段树可以让update和query的时间复杂度都达到$O(\log n)$的水平。</p><h2 id="Simple-Version-to-query-the-sum"><a href="#Simple-Version-to-query-the-sum" class="headerlink" title="Simple Version - to query the sum"></a>Simple Version - to query the sum</h2><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXN 1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">int</span> t[<span class="hljs-number">4</span>*MAXN];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> tl, <span class="hljs-keyword">int</span> tr)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(tl == tr)</span><br><span class="line">        t[v] = a[tl];</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> tm = (tl + tr) / <span class="hljs-number">2</span>;</span><br><span class="line">        build(a, v*<span class="hljs-number">2</span>, tl, tm);</span><br><span class="line">        build(a, v*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, tm+<span class="hljs-number">1</span>, tr);</span><br><span class="line">        t[v] = t[v*<span class="hljs-number">2</span>] + t[v*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> tl, <span class="hljs-keyword">int</span> tr, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(l &gt; r)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">if</span>(l == tl &amp;&amp; r == tr)</span><br><span class="line">        <span class="hljs-keyword">return</span> t[v];</span><br><span class="line">    <span class="hljs-keyword">int</span> tm = (tl + tr) / <span class="hljs-number">2</span>;</span><br><span class="line">    <span class="hljs-keyword">return</span> sum(v*<span class="hljs-number">2</span>,t1, tm, l, min(r, tm)) + sum(v*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, tm+<span class="hljs-number">1</span>, tr, max(l, tm+<span class="hljs-number">1</span>) ,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, <span class="hljs-keyword">int</span> tl, <span class="hljs-keyword">int</span> tr, <span class="hljs-keyword">int</span> pos, <span class="hljs-keyword">int</span> val)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span>(tl = tr)</span><br><span class="line">        t[v] = val;</span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tm = (tl + tr) / <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(pos &lt;= tm)</span><br><span class="line">            update(v*<span class="hljs-number">2</span>, tl, tm, pos, val);</span><br><span class="line">        <span class="hljs-keyword">else</span>    </span><br><span class="line">            update(v*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>, tm+<span class="hljs-number">1</span>, tr, pos, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Range-updates"><a href="#Range-updates" class="headerlink" title="Range updates"></a>Range updates</h2><p>在前一个样例中，更新操作只是针对一个元素的。但事实上，在实际问题中我们也会遇到区间更新的情况，例如在给一个区间内的所有元素均加一个值。一个直接的想法是做相应次数的单点更新，当然这样一来时间复杂度就变成了$O(m\log n)$级别，这并不是我们希望看到的。</p><p>为了解决这个问题，我们用到了一个很好的思想——延迟更新，顾名思义，延迟更新就是在更新时不进行操作，只是给它打上一个“待更新”的标签（也可能会带有一些数据），当我们用到的时候再去做更新。举一个关于求和线段树的栗子，当我们想要给区间<code>[0,10]</code>的子区间<code>[0,6]</code>内的所有元素加上<code>val</code>，我们会将问题拆分成<code>[0,5]</code>和<code>[6,10]</code>两部分，而<code>[0,5]</code>是被子区间<code>[0,6]</code>包含的，因此此时我们只需暂时更新对应区间<code>[0,5]</code>的节点即可（给这个节点加上<code>6*val</code>）。当然为了之后的更新，我们需要给这个节点打上一个延迟更新标记。在下一次访问到这个节点时，我们需要先将延迟的更新下达，再继续完成原定操作。</p><p>延迟更新的思路有点类似于Cache的写回法——着眼于当下，只在必要时执行操作。具体到每个问题，延迟更新都会有自己的实现方式，不要过分拘泥于常规的形式，而应该具体问题具体分析。实例可以参考<a href="http://www.gavinld.com/2020/02/16/leetcode218/" target="_blank" rel="noopener">leetcode218天际线</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线段树&quot;&gt;&lt;a href=&quot;#线段树&quot; class=&quot;headerlink&quot; title=&quot;线段树&quot;&gt;&lt;/a&gt;线段树&lt;/h1&gt;&lt;h2 id=&quot;线段树的结构&quot;&gt;&lt;a href=&quot;#线段树的结构&quot; class=&quot;headerlink&quot; title=&quot;线段树的结构&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="算法与数据结构" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="SJTUGavinLiu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="SJTUGavinLiu.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="区间" scheme="SJTUGavinLiu.github.io/tags/%E5%8C%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>leetcode214</title>
    <link href="SJTUGavinLiu.github.io/2020/02/13/leetcode214/"/>
    <id>SJTUGavinLiu.github.io/2020/02/13/leetcode214/</id>
    <published>2020-02-13T08:36:22.000Z</published>
    <updated>2020-02-13T08:37:07.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最短回文串"><a href="#最短回文串" class="headerlink" title="最短回文串"></a>最短回文串</h1><p>给定一个字符串 <strong><em>s</em></strong>，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。</p><hr><p>这道题本质上是要求出给定字符串的最大回文子串，不同之处在于，该字串要求从给定字符串的头部开始截取。</p><h2 id="中心扩展算法"><a href="#中心扩展算法" class="headerlink" title="中心扩展算法"></a>中心扩展算法</h2><p>中心扩展$O(n^2)$在面对重复连续字符较多的字符串效率极低。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">int</span> Max = INT_MIN;</span><br><span class="line">    <span class="hljs-keyword">int</span> left;</span><br><span class="line">    <span class="hljs-keyword">int</span> right;</span><br><span class="line">    <span class="hljs-keyword">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">helper</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r,  <span class="hljs-built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> i = l;</span><br><span class="line">        <span class="hljs-keyword">int</span> j = r;</span><br><span class="line">        <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; s.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(s[i] != s[j])</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            i--;</span><br><span class="line">            j++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>( i == <span class="hljs-number">-1</span>  &amp;&amp; (j-i<span class="hljs-number">-1</span>) &gt; Max)</span><br><span class="line">        &#123;</span><br><span class="line">            Max = j - i <span class="hljs-number">-1</span>;</span><br><span class="line">            left = l;</span><br><span class="line">            right = r;</span><br><span class="line">            radius = j - r - <span class="hljs-number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">shortestPalindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> len = s.size();</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(i,i,s);</span><br><span class="line">            helper(i,i+<span class="hljs-number">1</span>,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">string</span> res = s;</span><br><span class="line">        <span class="hljs-keyword">int</span> l = left - radius;</span><br><span class="line">        <span class="hljs-keyword">int</span> r = right + radius;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        r++;</span><br><span class="line">        <span class="hljs-keyword">while</span>(r &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            res = s[r] + res;</span><br><span class="line">            r++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h2><p>Manacher算法是解决回文串问题的一个很好的优化思路，（具体可以见于<a href="http://www.gavinld.com/2020/02/13/Manacher/" target="_blank" rel="noopener">Manacher算法</a>）。我们只需在原算法的基础上记录最优的子回文串，即可实现一个$O(n)$的算法。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> encode(i,j) ((i)+(j))</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">int</span> id;</span><br><span class="line">    <span class="hljs-keyword">int</span> res1, res2;</span><br><span class="line">    <span class="hljs-keyword">int</span> Max = INT_MIN;</span><br><span class="line">    <span class="hljs-keyword">int</span> mx;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">helper</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fir, <span class="hljs-keyword">int</span> sec, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; p, <span class="hljs-built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> cur =encode(fir, sec);</span><br><span class="line"> </span><br><span class="line">        <span class="hljs-keyword">if</span>(sec &lt; mx)</span><br><span class="line">            p[cur] = min(p[<span class="hljs-number">2</span>*id - cur],mx-sec);</span><br><span class="line">        <span class="hljs-keyword">else</span>    </span><br><span class="line">            p[cur] = fir == sec;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//cout &lt;&lt; (fir-p[cur] &gt;= 0 &amp;&amp; sec+p[cur] &lt; int(s.size()) &amp;&amp; s[fir-p[cur]] == s[sec+p[cur]]) &lt;&lt;endl;</span></span><br><span class="line">        <span class="hljs-keyword">while</span>(fir-p[cur] &gt;= <span class="hljs-number">0</span> &amp;&amp; sec+p[cur] &lt; <span class="hljs-keyword">int</span>(s.size()) &amp;&amp; s[fir-p[cur]] == s[sec+p[cur]]) </span><br><span class="line">            p[cur]++;</span><br><span class="line">        p[cur]--;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span>(fir - p[cur] == <span class="hljs-number">0</span> &amp;&amp; Max &lt; (<span class="hljs-number">2</span> * p[cur] + <span class="hljs-number">1</span> + (fir != sec)))</span><br><span class="line">        &#123;</span><br><span class="line">            Max = <span class="hljs-number">2</span> * p[cur] + <span class="hljs-number">1</span> + (fir != sec);</span><br><span class="line">            res1 = fir;</span><br><span class="line">            res2 = sec;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="hljs-keyword">if</span>(sec + p[cur] &gt; mx)</span><br><span class="line">        &#123;</span><br><span class="line">            mx = sec + p[cur];</span><br><span class="line">            id = encode(fir,sec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">shortestPalindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s.empty())   <span class="hljs-keyword">return</span> s;</span><br><span class="line">        <span class="hljs-comment">//cout &lt;&lt; s.size() &lt;&lt;endl;</span></span><br><span class="line">        res1=res2=<span class="hljs-number">0</span>;</span><br><span class="line">        id=<span class="hljs-number">0</span>;</span><br><span class="line">        mx=<span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; p(s.size() + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= s.size()/<span class="hljs-number">2</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(i, i, p, s);</span><br><span class="line">            helper(i, i+<span class="hljs-number">1</span>, p, s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">int</span> i = res2 + p[encode(res1, res2)]+<span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-built_in">string</span> res = s.substr(i, s.size() - i);</span><br><span class="line">        reverse(res.begin(), res.end());</span><br><span class="line">    </span><br><span class="line">        <span class="hljs-keyword">return</span> res + s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>KMP也是字符串领域的一个重要匹配算法（具体可以见于<a href="http://www.gavinld.com/2020/02/12/KMP/" target="_blank" rel="noopener">KMP算法</a>），由此可以有一个新的思路——将原字符串求逆序，然后利用KMP算法进行交错区域的匹配。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getRecord</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp; s, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp; record)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> cur = record[i<span class="hljs-number">-1</span>];</span><br><span class="line">            <span class="hljs-keyword">while</span>(cur &gt; <span class="hljs-number">0</span> &amp;&amp; s[i] != s[cur])</span><br><span class="line">                cur = record[cur<span class="hljs-number">-1</span>];</span><br><span class="line">            record[i] = cur + s[i] == s[cur];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">shortestPalindrome</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">string</span> t = s;</span><br><span class="line">        reverse(t.begin(), t.end());</span><br><span class="line">        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;  <span class="hljs-comment">//指示字符串s</span></span><br><span class="line">        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;  <span class="hljs-comment">//指示字符串t</span></span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; record(s.size(), <span class="hljs-number">0</span>);</span><br><span class="line">        getRecord(s, record);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span>(j &lt; t.size())</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">while</span>((j+i) &lt; t.size() &amp;&amp; s[i] == t[j+i])</span><br><span class="line">                i++;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>((j+i) == t.size())   </span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            j = max(j+<span class="hljs-number">1</span>,j + i - (i &gt; <span class="hljs-number">0</span> ? record[i<span class="hljs-number">-1</span>] : <span class="hljs-number">0</span>));</span><br><span class="line">            i = i &gt; <span class="hljs-number">0</span> ? record[i<span class="hljs-number">-1</span>] : <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> t.substr(<span class="hljs-number">0</span>, j) + s; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最短回文串&quot;&gt;&lt;a href=&quot;#最短回文串&quot; class=&quot;headerlink&quot; title=&quot;最短回文串&quot;&gt;&lt;/a&gt;最短回文串&lt;/h1&gt;&lt;p&gt;给定一个字符串 &lt;strong&gt;&lt;em&gt;s&lt;/em&gt;&lt;/strong&gt;，你可以通过在字符串前面添加字符将其转换为回文
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="回文串" scheme="SJTUGavinLiu.github.io/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
      <category term="KMP" scheme="SJTUGavinLiu.github.io/tags/KMP/"/>
    
      <category term="字符串" scheme="SJTUGavinLiu.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Manacher" scheme="SJTUGavinLiu.github.io/tags/Manacher/"/>
    
  </entry>
  
  <entry>
    <title>Manacher</title>
    <link href="SJTUGavinLiu.github.io/2020/02/13/Manacher/"/>
    <id>SJTUGavinLiu.github.io/2020/02/13/Manacher/</id>
    <published>2020-02-13T01:53:11.000Z</published>
    <updated>2020-02-13T06:48:54.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>给定一个字符串，求出其最长回文子串</p><h2 id="中心扩展"><a href="#中心扩展" class="headerlink" title="中心扩展"></a>中心扩展</h2><p>一个常规的思路是从给定字符串每个位置的中心展开，这个算法的时间复杂度是$O(n^2)$。类似于我在讨论KMP算法时的直觉，我们希望从每个位置中心展开搜索时能够根据之前搜索得到的潜在信息来优化当前搜索的起始位置。</p><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h3><p>我们在处理回文串的过程中，经常要面对的一个问题就是奇回文串与偶回文串的区分。关于这个问题我们通常有两个方法</p><ol><li>用两个点坐标指代回文串的中心，其中$(i,i)$ 代表奇回文串的中心，$(i,i+1)$代表偶回文串的中心。</li><li>在原字符串的字符间插入占位符（占位符在字符串中不能出现）</li></ol><p>这里我就直接使用第一种表示方式来实现Manacher算法。</p><p>Manacher的关键在于维护当前能搜索到的最远距离<code>mx</code>以及达到这个距离的子串中心<code>id</code>（包含两个坐标点<code>id1</code>,<code>id2</code>），当我们当前探索的点<code>i</code>小于<code>mx</code>时，我们可以找到它关于中心<code>id</code>的对称点<code>j</code>，用由它展开的回文串长度来初始化当前的搜索<code>radius = min(mx-i,p[j])</code>（<code>p</code>存放每一个位置展开的回文串的长度）。当然这里我们希望子串的中心能唯一对应数轴上的一个点，因此设计一个编码函数<code>int encode(int i, int j){return i+j}</code>将两个坐标点转换为唯一对应的一个坐标点。</p><p><img src="/images/Manacher.assets/1581521977527.png" alt="Manacher算法图示"></p><p>算法的实现如下</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> encode(i, j) ((i)+(j))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">manacher</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">int</span> id;</span><br><span class="line">    <span class="hljs-keyword">int</span> mx;</span><br><span class="line">    <span class="hljs-keyword">int</span> Max;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">helper</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fir, <span class="hljs-keyword">int</span> sec, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; p, <span class="hljs-built_in">string</span>&amp; s)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> cur = encode(fir, sec);</span><br><span class="line">        <span class="hljs-keyword">if</span>(sec &lt; mx)</span><br><span class="line">            p[cur] = min(p[<span class="hljs-number">2</span>*id - cur],mx-sec);</span><br><span class="line">        <span class="hljs-keyword">else</span>    </span><br><span class="line">            p[cur] = fir == sec;</span><br><span class="line">        <span class="hljs-keyword">while</span>(fir-p[cur] &gt;= <span class="hljs-number">0</span> &amp;&amp; sec+p[cur] &lt; s.size() &amp;&amp; s[fir-p[cur]] == s[sec+p[cur]]) </span><br><span class="line">            p[cur]++;</span><br><span class="line">        p[cur]--;</span><br><span class="line"></span><br><span class="line">        Max = max(Max, <span class="hljs-number">2</span>*p[cur]+<span class="hljs-number">1</span>+(fir!=sec));</span><br><span class="line">        <span class="hljs-keyword">if</span>(sec + p[cur] &gt; mx)</span><br><span class="line">        &#123;</span><br><span class="line">            mx = sec + p[cur];</span><br><span class="line">            id = encode(fir,sec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    manacher() &#123;&#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">algo</span><span class="hljs-params">(<span class="hljs-built_in">string</span> text)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; p(text.size()*<span class="hljs-number">2</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        id = <span class="hljs-number">0</span>;    </span><br><span class="line">        mx = <span class="hljs-number">0</span>;</span><br><span class="line">        Max = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; text.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(i,i,p,text);</span><br><span class="line">            helper(i,i+<span class="hljs-number">1</span>,p,text);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> Max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    manacher obj;</span><br><span class="line">    <span class="hljs-built_in">cout</span> &lt;&lt; obj.algo(<span class="hljs-string">"abbabhcbapbchopxo"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于第二种表示回文串中心方式的算法如下（不是俺写的），作为补充</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">char</span> s[<span class="hljs-number">1000</span>];</span><br><span class="line"><span class="hljs-keyword">char</span> s_new[<span class="hljs-number">2000</span>];</span><br><span class="line"><span class="hljs-keyword">int</span> p[<span class="hljs-number">2000</span>];</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(s);</span><br><span class="line">    s_new[<span class="hljs-number">0</span>] = <span class="hljs-string">'$'</span>;</span><br><span class="line">    s_new[<span class="hljs-number">1</span>] = <span class="hljs-string">'#'</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s_new[j++] = s[i];</span><br><span class="line">        s_new[j++] = <span class="hljs-string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s_new[j] = <span class="hljs-string">'\0'</span>;  <span class="hljs-comment">// 别忘了哦</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> j;  <span class="hljs-comment">// 返回 s_new 的长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Manacher</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> len = Init();  <span class="hljs-comment">// 取得新字符串长度并完成向 s_new 的转换</span></span><br><span class="line">    <span class="hljs-keyword">int</span> max_len = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 最长回文长度</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> id;</span><br><span class="line">    <span class="hljs-keyword">int</span> mx = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (i &lt; mx)</span><br><span class="line">            p[i] = min(p[<span class="hljs-number">2</span> * id - i], mx - i);  <span class="hljs-comment">// 需搞清楚上面那张图含义, mx 和 2*id-i 的含义</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">            p[i] = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span> (s_new[i - p[i]] == s_new[i + p[i]])  <span class="hljs-comment">// 不需边界判断，因为左有'$',右有'\0'</span></span><br><span class="line">            p[i]++;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">// 我们每走一步 i，都要和 mx 比较，我们希望 mx 尽可能的远，这样才能更有机会执行 if (i &lt; mx)这句代码，从而提高效率</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (mx &lt; i + p[i])</span><br><span class="line">        &#123;</span><br><span class="line">            id = i;</span><br><span class="line">            mx = i + p[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        max_len = max(max_len, p[i] - <span class="hljs-number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> max_len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法的复杂度分析"><a href="#算法的复杂度分析" class="headerlink" title="算法的复杂度分析"></a>算法的复杂度分析</h2><p>Manacher算法为线性算法，即使最差情况下时间复杂度亦为$O(n)$。</p><p>证明并不困难，考虑到我们计算<code>p[i]</code>的时候，只有如下几种情况</p><ol><li><code>i</code>落在<code>id</code>展开的范围内，其镜像点<code>j</code>的回文串半径<code>p[j]</code>满足<code>i + p[j] &lt; mx</code></li><li><code>i</code>落在<code>id</code>展开的范围内，其镜像点<code>j</code>的回文串半径<code>p[j]</code>满足<code>i + p[j] &gt;= mx</code></li><li><code>i</code>落在<code>id</code>展开的范围外，<code>p[i]</code>从1开始搜索。</li></ol><p>对于第一种情况，无需进行额外的搜索即可更新<code>p[i]</code>的值；对于第二种情况，搜索的同时，也同步更新了<code>mx</code>的值；对于第三种情况，同于第二种情况。</p><p>由上可以看出，我们每次进行搜索时都同步推进了<code>mx</code>的大小。换言之，我们搜索的步数正好与<code>mx</code>相等。因此这是一个线性算法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Manacher算法&quot;&gt;&lt;a href=&quot;#Manacher算法&quot; class=&quot;headerlink&quot; title=&quot;Manacher算法&quot;&gt;&lt;/a&gt;Manacher算法&lt;/h1&gt;&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="算法与数据结构" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="回文串" scheme="SJTUGavinLiu.github.io/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
      <category term="字符串" scheme="SJTUGavinLiu.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="Manacher" scheme="SJTUGavinLiu.github.io/tags/Manacher/"/>
    
      <category term="算法" scheme="SJTUGavinLiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>KMP</title>
    <link href="SJTUGavinLiu.github.io/2020/02/12/KMP/"/>
    <id>SJTUGavinLiu.github.io/2020/02/12/KMP/</id>
    <published>2020-02-12T08:49:25.000Z</published>
    <updated>2020-02-13T01:55:58.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>如何在文本中寻找目标字符串?</p><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>如何在一个字符串<code>text</code>中寻找目标字符串<code>target</code>，最简单的思路是从<code>text</code>的第一个字符出发逐个匹配，如果失配则移动到<code>text</code>的下一个位置，从头开始匹配字符串<code>target</code>。但这样做的问题是显然的——对于<code>text</code>中的每一个位置我们都需要从头开始匹配。换言之，每一次匹配都是一个独立的进程，并没有利用到之前匹配过程中获得的潜在信息。那么是否有办法利用匹配过程中积累的信息来对后续的匹配进行一定的优化呢？答案就是KMP。</p><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h3><ol><li><p>前缀：<code>a</code>,<code>ab</code>,<code>abc</code>均是<code>abcd</code>的前缀</p></li><li><p>后缀：<code>d</code>,<code>cd</code>,<code>bcd</code>均是<code>abcd</code>的后缀 </p></li><li><p>公共最大长，前缀集合与后缀集合交集中最长的字符串的长度。例如<code>ababa</code>的公共最大长是3，对应<code>aba</code></p><blockquote><p>前后缀不能是它们本身</p></blockquote></li></ol><h3 id="求公共最大长"><a href="#求公共最大长" class="headerlink" title="求公共最大长"></a>求公共最大长</h3><p>现在我们对<code>target</code>头部到其任意位置的子串计算最大公共最大长（为啥要算这个之后会解释）。这里我们用动态规划进行处理，因此我们需要找到一个合适的状态转移方程。举一个例子</p><table><thead><tr><th>index</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td><code>target</code></td><td>a</td><td>b</td><td>c</td><td>a</td><td>b</td><td></td></tr><tr><td>record</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td><td></td></tr></tbody></table><p>已知index 0~4的公共最大长，求index 5的情况。先考察0-4的字串,</p><ol><li>如果0-4的公共最大前后缀加上<code>target[5]</code>为符合0-5子串前后缀，则0-5的公共最大长为<code>record[4]+1</code>（如若不然，可以得到0-4的更长公共前后缀，矛盾）</li><li>如果不符合，将考察对象转移到0-4子串的最大公共前后缀上，如此循环，直到找到合适的前后缀或考察对象落在了单字符子串上。</li></ol><p>具体算法实现如下</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_pre_post_len</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; record)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    record[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">//单字符字符串没有公共前后缀</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; s.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> j = record[i<span class="hljs-number">-1</span>];</span><br><span class="line">        <span class="hljs-keyword">while</span>(s[j] != s[i] &amp;&amp; j &gt; <span class="hljs-number">0</span>)</span><br><span class="line">            j = record[j<span class="hljs-number">-1</span>];</span><br><span class="line">        record[i] = j + (s[j] == s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">//for(int i = 0; i &lt; s.size(); i++)</span></span><br><span class="line">    <span class="hljs-comment">//    cout &lt;&lt; record[i] &lt;&lt; '\t';</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用最大公共长数组优化搜索"><a href="#利用最大公共长数组优化搜索" class="headerlink" title="利用最大公共长数组优化搜索"></a>利用最大公共长数组优化搜索</h3><p>同样举一个例子（随手在网上抓了一个，不想作图，懒）</p><p><img src="/images/KMP.assets/1581496648893.png" alt="在index为5的位置失配"></p><p>可以看到字符串在index为5的位置失配了，如果是BF算法，我们就只是保守地将目标串右移一格。然而由于我们已经知道了每个子字符串的公共最大前后缀，我们可以做更大幅度的移动，如下所示。</p><p><img src="/images/KMP.assets/1581496998554.png" alt="移动目标串"></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">kmp</span><span class="hljs-params">(<span class="hljs-built_in">string</span> text, <span class="hljs-built_in">string</span> target)</span></span></span><br><span class="line"><span class="hljs-function"></span>&#123;</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; record(target.size(), <span class="hljs-number">0</span>);</span><br><span class="line">    get_pre_post_len(target, record);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; </span><br><span class="line">    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span>((i+target.size()) &lt;= text.size())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">while</span>(j &lt; target.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(target[j] != text[i+j])</span><br><span class="line">            &#123;</span><br><span class="line">                i = i + j - record[j<span class="hljs-number">-1</span>];</span><br><span class="line">                j = record[j<span class="hljs-number">-1</span>];</span><br><span class="line">                <span class="hljs-keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">if</span>(j == target.size())</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KMP算法&quot;&gt;&lt;a href=&quot;#KMP算法&quot; class=&quot;headerlink&quot; title=&quot;KMP算法&quot;&gt;&lt;/a&gt;KMP算法&lt;/h1&gt;&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="算法与数据结构" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="KMP" scheme="SJTUGavinLiu.github.io/tags/KMP/"/>
    
      <category term="字符串" scheme="SJTUGavinLiu.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="dp" scheme="SJTUGavinLiu.github.io/tags/dp/"/>
    
      <category term="算法" scheme="SJTUGavinLiu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>前缀树</title>
    <link href="SJTUGavinLiu.github.io/2020/02/11/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    <id>SJTUGavinLiu.github.io/2020/02/11/%E5%89%8D%E7%BC%80%E6%A0%91/</id>
    <published>2020-02-11T14:28:56.000Z</published>
    <updated>2020-02-11T14:31:06.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀树-Trie"><a href="#前缀树-Trie" class="headerlink" title="前缀树 Trie"></a>前缀树 Trie</h1><p>Trie树是一个有根的树，其结点具有以下字段：</p><ul><li>$R$个指向子结点的链接，其中每个链接对应字母表数据集中的一个字母</li><li>bool字段，标定该结点是否为一个单词的结尾</li></ul><p>支持加入新字符串，查找字符串以及查找前缀的功能，其中时间复杂度均为$O(n)。</p><p><img src="/images/%E5%89%8D%E7%BC%80%E6%A0%91.assets/1581429459781.png" alt="单词 &quot;leet&quot; 在 Trie 树中的表示"></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrieNode</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    TrieNode* next[<span class="hljs-number">26</span>]&#123;<span class="hljs-literal">NULL</span>&#125;;</span><br><span class="line">    <span class="hljs-keyword">bool</span> isEnd = <span class="hljs-literal">false</span>;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    TrieNode()&#123;&#125;</span><br><span class="line">    <span class="hljs-function">TrieNode* <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> next[c - <span class="hljs-string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function">TrieNode* <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!next[c - <span class="hljs-string">'a'</span>])</span><br><span class="line">            next[c - <span class="hljs-string">'a'</span>] = <span class="hljs-keyword">new</span> TrieNode();</span><br><span class="line">    </span><br><span class="line">        <span class="hljs-keyword">return</span> next[c - <span class="hljs-string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_end</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        isEnd = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_end</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Trie</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    TrieNode* root;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-comment">/** Initialize your data structure here. */</span></span><br><span class="line">    Trie() &#123;</span><br><span class="line">        root = <span class="hljs-keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/** Inserts a word into the trie. */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        TrieNode* cur = root;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c: word)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;insert(c);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        cur-&gt;set_end();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/** Returns if the word is in the trie. */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        TrieNode* cur = root;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c: word)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;get(c);</span><br><span class="line">            <span class="hljs-keyword">if</span>(!cur)    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> cur-&gt;is_end();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="hljs-comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(<span class="hljs-built_in">string</span> prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode* cur = root;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c: prefix)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;get(c);</span><br><span class="line">            <span class="hljs-keyword">if</span>(!cur)    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前缀树-Trie&quot;&gt;&lt;a href=&quot;#前缀树-Trie&quot; class=&quot;headerlink&quot; title=&quot;前缀树 Trie&quot;&gt;&lt;/a&gt;前缀树 Trie&lt;/h1&gt;&lt;p&gt;Trie树是一个有根的树，其结点具有以下字段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$R$个指向子结点
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="算法与数据结构" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="前缀树" scheme="SJTUGavinLiu.github.io/tags/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    
      <category term="数据结构" scheme="SJTUGavinLiu.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>leetcode212</title>
    <link href="SJTUGavinLiu.github.io/2020/02/11/leetcode212/"/>
    <id>SJTUGavinLiu.github.io/2020/02/11/leetcode212/</id>
    <published>2020-02-11T14:27:18.000Z</published>
    <updated>2020-02-11T14:28:28.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单词搜索Ⅱ"><a href="#单词搜索Ⅱ" class="headerlink" title="单词搜索Ⅱ"></a>单词搜索Ⅱ</h1><p>给定一个二维网格 board 和一个字典中的单词列表 words，找出所有同时在二维网格和字典中出现的单词。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</p><hr><p>暴力的解法就是对每一个单词在每一个位置做一遍DFS。这样做的开销很大，因为我们独立考虑了每一个单词而不是把单词列表作为整体来考虑。想到这里，我的直觉是寻找一个线性表之外的数据结构来存储单词列表以实现整体搜索，而Leetcode208中提到的前缀树就是一个好的选择。</p><p>我们可以提前将单词列表存入一个前缀树中，之后遍历每一个位置进行DFS。在DFS的过程中，我们同步移动前缀树结点与<code>board</code>上的位置这样我们就实现了同时查询前缀树上所有单词的目的。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrieNode</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    TrieNode* next[<span class="hljs-number">26</span>]&#123;<span class="hljs-literal">NULL</span>&#125;;</span><br><span class="line">    <span class="hljs-keyword">bool</span> isEnd = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-built_in">string</span> word;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    TrieNode()&#123;&#125;</span><br><span class="line">    <span class="hljs-function">TrieNode* <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> next[c - <span class="hljs-string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function">TrieNode* <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!next[c - <span class="hljs-string">'a'</span>])</span><br><span class="line">            next[c - <span class="hljs-string">'a'</span>] = <span class="hljs-keyword">new</span> TrieNode();</span><br><span class="line">    </span><br><span class="line">        <span class="hljs-keyword">return</span> next[c - <span class="hljs-string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_end</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        isEnd = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_end</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_word</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        word = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">get_word</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; res;</span><br><span class="line">    <span class="hljs-built_in">unordered_set</span>&lt;<span class="hljs-built_in">string</span>&gt; hash_set;</span><br><span class="line">    <span class="hljs-keyword">int</span> height,width;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; height &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfsSearch</span><span class="hljs-params">(TrieNode* cur, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&gt;&amp; mark)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        cur = cur-&gt;get(board[i][j]);</span><br><span class="line">        <span class="hljs-keyword">if</span>(!cur)    <span class="hljs-keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span>(cur-&gt;is_end())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">string</span> tmp = cur-&gt;get_word();</span><br><span class="line">            <span class="hljs-keyword">if</span>(!hash_set.count(tmp))</span><br><span class="line">            &#123;</span><br><span class="line">                res.push_back(tmp);</span><br><span class="line">                hash_set.insert(tmp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mark[i][j] = <span class="hljs-literal">false</span>;</span><br><span class="line">        i -= <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark);    </span><br><span class="line">        i += <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark);    </span><br><span class="line">        i -= <span class="hljs-number">1</span>;</span><br><span class="line">        j -= <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark);    </span><br><span class="line">        j += <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark);    </span><br><span class="line">        j -= <span class="hljs-number">1</span>;</span><br><span class="line">        mark[i][j] = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; findWords(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">        height = board.size();</span><br><span class="line">        width = board[<span class="hljs-number">0</span>].size();</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&gt; mark(height, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;(width, <span class="hljs-number">1</span>));</span><br><span class="line">        </span><br><span class="line">        TrieNode* root = <span class="hljs-keyword">new</span> TrieNode();</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; word: words)</span><br><span class="line">        &#123;</span><br><span class="line">            TrieNode* cur = root;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; c: word)</span><br><span class="line">            &#123;</span><br><span class="line">                cur = cur-&gt;insert(c);</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;set_end();</span><br><span class="line">            cur-&gt;set_word(word);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; height; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; width; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dfsSearch(root, i, j, board, mark);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在此基础上还有一个小细节可以优化。由于单词列表是给定的，事实上我们可以用对应的index的形式来唯一指定对应的单词，这样一来，我们就可以用普通的数组来记录当前单词是否被查询到过，而避免了使用哈希表时间和空间上都有所节省。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrieNode</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    TrieNode* next[<span class="hljs-number">26</span>]&#123;<span class="hljs-literal">NULL</span>&#125;;</span><br><span class="line">    <span class="hljs-keyword">bool</span> isEnd = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">int</span> word = <span class="hljs-number">-1</span>;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    TrieNode()&#123;&#125;</span><br><span class="line">    <span class="hljs-function">TrieNode* <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> next[c - <span class="hljs-string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function">TrieNode* <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!next[c - <span class="hljs-string">'a'</span>])</span><br><span class="line">            next[c - <span class="hljs-string">'a'</span>] = <span class="hljs-keyword">new</span> TrieNode();</span><br><span class="line">    </span><br><span class="line">        <span class="hljs-keyword">return</span> next[c - <span class="hljs-string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_end</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        isEnd = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is_end</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> isEnd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">set_word</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        word = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get_word</span><span class="hljs-params">()</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; res;</span><br><span class="line">    <span class="hljs-keyword">int</span> height,width;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; height &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfsSearch</span><span class="hljs-params">(TrieNode* cur, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&gt;&amp; mark, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; words, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&amp; found)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        cur = cur-&gt;get(board[i][j]);</span><br><span class="line">        <span class="hljs-keyword">if</span>(!cur)    <span class="hljs-keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span>(cur-&gt;is_end())</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">int</span> idx = cur-&gt;get_word();</span><br><span class="line">            <span class="hljs-comment">//cout&lt;&lt; idx &lt;&lt;endl;</span></span><br><span class="line">            <span class="hljs-keyword">if</span>(!found[idx])</span><br><span class="line">            &#123;</span><br><span class="line">                res.push_back(words[idx]);</span><br><span class="line">                found[idx] = <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        mark[i][j] = <span class="hljs-literal">false</span>;</span><br><span class="line">        i -= <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark, words, found);    </span><br><span class="line">        i += <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark, words, found);    </span><br><span class="line">        i -= <span class="hljs-number">1</span>;</span><br><span class="line">        j -= <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark, words, found);        </span><br><span class="line">        j += <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(isValid(i,j) &amp;&amp; mark[i][j]) dfsSearch(cur, i, j, board, mark, words, found);    </span><br><span class="line">        j -= <span class="hljs-number">1</span>;</span><br><span class="line">        mark[i][j] = <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; findWords(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">char</span>&gt;&gt;&amp; board, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; words) &#123;</span><br><span class="line">        height = board.size();</span><br><span class="line">        width = board[<span class="hljs-number">0</span>].size();</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&gt; mark(height, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;(width, <span class="hljs-number">1</span>));</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt; found(words.size(), <span class="hljs-number">0</span>);</span><br><span class="line">        TrieNode* root = <span class="hljs-keyword">new</span> TrieNode();</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; words.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            TrieNode* cur = root;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; c: words[i])</span><br><span class="line">            &#123;</span><br><span class="line">                cur = cur-&gt;insert(c);</span><br><span class="line">            &#125;</span><br><span class="line">            cur-&gt;set_end();</span><br><span class="line">            cur-&gt;set_word(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; height; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; width; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                dfsSearch(root, i, j, board, mark, words, found);    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单词搜索Ⅱ&quot;&gt;&lt;a href=&quot;#单词搜索Ⅱ&quot; class=&quot;headerlink&quot; title=&quot;单词搜索Ⅱ&quot;&gt;&lt;/a&gt;单词搜索Ⅱ&lt;/h1&gt;&lt;p&gt;给定一个二维网格 board 和一个字典中的单词列表 words，找出所有同时在二维网格和字典中出现的单词。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="前缀树" scheme="SJTUGavinLiu.github.io/tags/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    
      <category term="DFS" scheme="SJTUGavinLiu.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>leetcode209</title>
    <link href="SJTUGavinLiu.github.io/2020/02/11/leetcode209/"/>
    <id>SJTUGavinLiu.github.io/2020/02/11/leetcode209/</id>
    <published>2020-02-10T16:37:31.000Z</published>
    <updated>2020-02-10T16:38:18.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h1><p>给定一个含有 <strong>n</strong> 个正整数的数组和一个正整数 <strong>s ，</strong>找出该数组中满足其和 <strong>≥ s</strong> 的长度最小的连续子数组<strong>。</strong>如果不存在符合条件的连续子数组，返回 0。</p><hr><ul><li><p>思路一</p><p>基于贪心的想法，我们从左右两边向中间逼近，当当前子序列的和仍大于s，则扔掉左右两端较小的数，知道子序列的和小于s。这是我拿到题的第一个思路，但很遗憾，它并不能保证得到最优解。考虑一个数组$[3,1,1,1,…,2,2,2]$，假设这个数组的和是$s+6$，根据判定规则，我们会将右指针左移三个单位。而事实上，最优的解法是将左指针右移四个单位。</p></li><li><p>思路二</p><p>仍然是基于贪心的想法，我们维护一个滑动窗口来描述子序列。</p><ul><li>当子序列大于等于s时，更新最优解，并将左指针右移。</li><li>当子序列小于s时，右指针右移。</li></ul><p>那么这个思路是否能保证得到最优解呢，答案是肯定的。事实上我们在这个过程中查询了以每个节点为起始点的最小序列。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minSubArrayLen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> s, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>,right = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> len = nums.size();</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> res = INT_MAX;</span><br><span class="line">        <span class="hljs-keyword">while</span>(right &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">while</span>(sum &lt; s &amp;&amp; right &lt; len)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=nums[right++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">while</span>(sum &gt;= s)</span><br><span class="line">            &#123;</span><br><span class="line">                res = min(res, right-left);</span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res == INT_MAX ? <span class="hljs-number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;长度最小的子数组&quot;&gt;&lt;a href=&quot;#长度最小的子数组&quot; class=&quot;headerlink&quot; title=&quot;长度最小的子数组&quot;&gt;&lt;/a&gt;长度最小的子数组&lt;/h1&gt;&lt;p&gt;给定一个含有 &lt;strong&gt;n&lt;/strong&gt; 个正整数的数组和一个正整数 &lt;stron
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="子序列" scheme="SJTUGavinLiu.github.io/tags/%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
      <category term="贪心" scheme="SJTUGavinLiu.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="滑动窗口" scheme="SJTUGavinLiu.github.io/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>leetcode207</title>
    <link href="SJTUGavinLiu.github.io/2020/02/10/leetcode207/"/>
    <id>SJTUGavinLiu.github.io/2020/02/10/leetcode207/</id>
    <published>2020-02-09T16:14:29.000Z</published>
    <updated>2020-02-09T16:16:07.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h1><p>现在你总共有 n 门课需要选，记为 0 到 n-1。</p><p>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]</p><p>给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？</p><hr><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><blockquote><p><strong>Topological Order</strong>:  A topological order of a directed graph G = (V, E) is an ordering of its<br>nodes as $v_1,..,v_n$ so that for every edge $(v_i,v_j)$ we have for $i&lt;j$.</p></blockquote><p>拓扑排序的一个经典应用案例。</p><p>关于拓扑排序有一个重要结论——一个有向图存在拓扑排序的充分必要条件是该图不存在有向环（DAG）。这个结论的具体证明由一下几个引理构成。</p><blockquote><p>Lemma1. If G has a topological ordering, then G is a DAG</p></blockquote><p>引理1通过构造矛盾容易证明。</p><blockquote><p>Lemma2. If G is DAG, then G has a node with no entering edges.</p></blockquote><p>如果每个点入度均大于0，由于节点数有限，总是能找到一个环，矛盾！</p><blockquote><p>Lemma3. If G is DAG, then G has a topological ordering.</p></blockquote><p>递归构造</p><ol><li><p>Base: n = 1 时，显然正确</p></li><li><p>若n = k时，结论成立。</p><p>n = k+1时，由Lemma1可以找到一个入度为0的节点v。G - { v } 是DAG（DAG删掉一个点显然还是DAG），由归纳假设得存在一个拓扑排序。因为v的入度为0，将v放在该排序前方即可得到一个有效排序。</p></li></ol><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>顺着证明的思路，我们不难发现，算法的关键就在入度为0的这些节点上。我们只需要不断地找出当前图中入度为0的点，并将其删除，更新其余点的入度即可确定该图是否存在拓扑排序。这是一个典型的贪心思想。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-keyword">int</span> numCourses, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; ajac(numCourses, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;());</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; indegree(numCourses, <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; qu;</span><br><span class="line">        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pre: prerequisites)</span><br><span class="line">        &#123;</span><br><span class="line">            ajac[pre[<span class="hljs-number">1</span>]].push_back(pre[<span class="hljs-number">0</span>]);</span><br><span class="line">            indegree[pre[<span class="hljs-number">0</span>]]++;</span><br><span class="line">        &#125;    </span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(indegree[i] == <span class="hljs-number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                qu.push(i);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">while</span>(!qu.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> cur = qu.front();</span><br><span class="line">            qu.pop();</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span>&amp; succ: ajac[cur])</span><br><span class="line">            &#123;</span><br><span class="line">                indegree[succ]--;</span><br><span class="line">                <span class="hljs-keyword">if</span>(indegree[succ] == <span class="hljs-number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    qu.push(succ);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span>(cnt == numCourses)</span><br><span class="line">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> cnt == numCourses;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;课程表&quot;&gt;&lt;a href=&quot;#课程表&quot; class=&quot;headerlink&quot; title=&quot;课程表&quot;&gt;&lt;/a&gt;课程表&lt;/h1&gt;&lt;p&gt;现在你总共有 n 门课需要选，记为 0 到 n-1。&lt;/p&gt;
&lt;p&gt;在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="证明" scheme="SJTUGavinLiu.github.io/tags/%E8%AF%81%E6%98%8E/"/>
    
      <category term="贪心" scheme="SJTUGavinLiu.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="拓扑排序" scheme="SJTUGavinLiu.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="图" scheme="SJTUGavinLiu.github.io/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>模拟退火算法</title>
    <link href="SJTUGavinLiu.github.io/2020/02/08/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"/>
    <id>SJTUGavinLiu.github.io/2020/02/08/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/</id>
    <published>2020-02-08T14:09:33.000Z</published>
    <updated>2020-02-08T14:10:45.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模拟退火算法-Simulated-Annealing"><a href="#模拟退火算法-Simulated-Annealing" class="headerlink" title="模拟退火算法 Simulated Annealing"></a>模拟退火算法 Simulated Annealing</h1><h2 id="爬山算法"><a href="#爬山算法" class="headerlink" title="爬山算法"></a>爬山算法</h2><p>在讨论SA之前，我们先简单谈一下爬山算法。爬山算法的思想很简单，它是一个纯粹的贪心算法，每次从当前解的邻近空间寻找一个最优解直到达到局部最优。它的问题很明显，完全的贪婪使得它并不保证能得到全局的最优解。</p><h2 id="如何解决爬山算法存在的问题"><a href="#如何解决爬山算法存在的问题" class="headerlink" title="如何解决爬山算法存在的问题"></a>如何解决爬山算法存在的问题</h2><p>事实上，一味地选取邻域上的最优解并不是一个好的选择。在搜索的初始阶段，我们对整个函数没有任何的感知，此时如果完全地采用贪婪策略，很有可能落在一个局部最优地的解里。为了避免这一情况的发生，我们应该在前期适当地去接纳一些看上去不是那么美好的解，以达到更好地感知函数整体状况的目的。这和强化学习里的Exploration和Exploitation权衡的思想是一致的。</p><h2 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h2><h3 id="Metropolis准则"><a href="#Metropolis准则" class="headerlink" title="Metropolis准则"></a>Metropolis准则</h3><p>假设在状态$x<em>{old}$时系统受到某种扰动而使其状态变为$x</em>{new}$。与此相对应，系统的能量也从$E(x<em>{old})$<br>变成$E(x</em>{new})$，系统由状态$x<em>{old}$变为状态$x</em>{new}$的接受概率p：</p><script type="math/tex; mode=display">p = \begin{cases}1 & if \space E(x_{new}) < E(x_{old})\\exp(-\frac{E(x_{new}) - E(x_{old})}{T}) & if \space E(x_{new}) \geq E(x_{old})\\\end{cases}</script><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p><img src="/images/模拟退火算法.assets/1581146186477.png" alt="模拟退火算法"></p><h3 id="算法细节"><a href="#算法细节" class="headerlink" title="算法细节"></a>算法细节</h3><ol><li><p>邻域候选解可以用均匀分布，正态分布，指数分布的概率密度函数对解空间进行随机采样来获得。</p></li><li><p>状态转移概率（p），反映了是否接受当前解的概率，采用Metropolis准则。</p></li><li><p>冷却进度表$T(t)$</p><p>经典模拟退火算法的降温方式$T(t) = \frac{T_0}{\lg(1+t))}$</p><p>快速模拟退火算法的降温方式$T(t) = \frac{T_0}{1+t}$</p></li><li><p>初始温度$T_0$，从理论上讲，初温越大，获得高质量解的几率越大，但花费的计算时间将增加</p><ol><li>均匀抽样一组状态，以各状态目标值的方差为初温。</li><li>随机产生一组状态，确定两两状态间最大目标值差，依据差值，利用一定的函数确定初温，比如$t<em>0 = -\Delta</em>{max}/p_r$,其中$p_r$为初始接受概率。</li></ol></li><li><p>内循环终止准则-Metropolis抽样稳定准则，用于决定在各温度下产生候选解的数目。常用的抽样稳定准则包括：</p><ol><li>检验目标函数的均值是否稳定</li><li>连续若干步的目标值变化较小</li><li>按一定的步数抽样</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模拟退火算法-Simulated-Annealing&quot;&gt;&lt;a href=&quot;#模拟退火算法-Simulated-Annealing&quot; class=&quot;headerlink&quot; title=&quot;模拟退火算法 Simulated Annealing&quot;&gt;&lt;/a&gt;模拟退火算法 S
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="建模" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/%E5%BB%BA%E6%A8%A1/"/>
    
    
      <category term="最优化" scheme="SJTUGavinLiu.github.io/tags/%E6%9C%80%E4%BC%98%E5%8C%96/"/>
    
      <category term="模拟退火算法" scheme="SJTUGavinLiu.github.io/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"/>
    
      <category term="爬山算法" scheme="SJTUGavinLiu.github.io/tags/%E7%88%AC%E5%B1%B1%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode179</title>
    <link href="SJTUGavinLiu.github.io/2020/02/08/leetcode179/"/>
    <id>SJTUGavinLiu.github.io/2020/02/08/leetcode179/</id>
    <published>2020-02-07T16:29:52.000Z</published>
    <updated>2020-02-07T16:30:46.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大数"><a href="#最大数" class="headerlink" title="最大数"></a>最大数</h1><p>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</p><hr><p>虽然仅仅是一道中等难度的题，但是一开始还是有点懵。最开始的想法是设计一个类似从高位开始的基数排序。但在处理不同位长数的排序时，我发现很难给出一个统一的大小判别规律，例如$962,96,9$的最优排序是$996962$,而$162,16,1$的最优排序是$162161$。因此这个思路就只能毙掉了Orz。</p><p>官方提供的题解是定义一个新的比较逻辑<code>bool cmp(string s1, string s2){s1+s2 &gt; s2+s1};</code>，下面证明一下这个比较逻辑的正确性。</p><ol><li><p>传递性</p><p><code>cmp(s1,s2)</code> and <code>cmp(s2,c3)</code>$\rightarrow$ <code>cmp(s1,s3)</code></p><p><strong>Proof</strong></p><p>假设$s_1,s_2,s_3$,长度分别为$l_1,l_2,l_3$，对应数分别为$n_1,n_2,n_3$。</p></li></ol><script type="math/tex; mode=display">   s_1 + s_2 \geq s_2 + s_1 \rightarrow n_1l_2 + n_2 \geq n_2l_1 + n_1\\   s_2 + s_3 \geq s_3 + s_2 \rightarrow n_2l_3 + n_3 \geq n_3l_2 + n_2\\   n_1(l_2 - 1) \geq n_2(l_1 - 1)\\   n_2(l_3 - 1) \geq n_3(l_2 - 1)\\</script><p>   因为(3)(4)式左右均非负，可得</p><script type="math/tex; mode=display">   n_1n_2(l_2-1)(l_3-1) \geq n_2n_3(l_1-1)(l_2-1)</script><ul><li><p>如果$l_2 = 1$，由(3)可知$l_1 = 1$</p><script type="math/tex; mode=display">n_1(l_3-1) \geq 0 = n_3(l_1-1)</script></li><li><p>如果$l_2 \neq 1$，由(5)可得</p><script type="math/tex; mode=display">n_1(l_3-1) \geq n_3(l_1-1)</script><p>综上均有</p><script type="math/tex; mode=display">n_1(l_3-1) \geq n_3(l_1-1)</script><p>即</p><script type="math/tex; mode=display">s_1+s_3 \geq s_3 + s_1</script></li></ul><ol><li><p>算法正确性</p><p><strong>Proof</strong></p><p>如若不然，存在一个最优序列含逆序对$s_2,s_1$（<code>cmp(s1,s2) = true</code>）。假设该逆序对之间的字符串为$s$。只需证明$s_1 + s +s_2 &gt; s_2 + s + s_1$，即可导出矛盾。</p><p>由于序列$s_1,s,s_2$经过了排序，有</p><script type="math/tex; mode=display">s_1 + s \geq s + s_1 \rightarrow l n_1 + n \geq l_1n + n_1\\s + s_2 \geq s_2 + s \rightarrow l_2 n + n_2 \geq l n_2 + n\\s_1 + s_2 \geq s_2+s_1 \rightarrow l_2 n_1 + n_2 \geq l_1 n_2 + n_1\\</script><p>$(1)+(2)+l\times (3)$，得</p><script type="math/tex; mode=display">ll_2n_1 + l_2n +n_2 \geq ll_1n_2 + l_1n +n_1</script><p>等价于</p><script type="math/tex; mode=display">s_1 + s +s_2 > s_2 + s + s_1</script><p>综上证毕。</p></li></ol><p>事实上，这道题的关键并不在于代码的实现上，算法正确性的证明显然更加重要。浏览了一下中文站的评论区几乎没有提到这一点，说明很多人在这上面还是模棱两可的，这也违背了我们做算法题的初衷，固以此作为补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最大数&quot;&gt;&lt;a href=&quot;#最大数&quot; class=&quot;headerlink&quot; title=&quot;最大数&quot;&gt;&lt;/a&gt;最大数&lt;/h1&gt;&lt;p&gt;给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;虽然仅仅是一道中等难度的题，但是一开始还是有点
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="排序" scheme="SJTUGavinLiu.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="证明" scheme="SJTUGavinLiu.github.io/tags/%E8%AF%81%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>leetcode174</title>
    <link href="SJTUGavinLiu.github.io/2020/02/06/leetcode174/"/>
    <id>SJTUGavinLiu.github.io/2020/02/06/leetcode174/</id>
    <published>2020-02-06T07:46:00.000Z</published>
    <updated>2020-02-06T07:46:59.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="地下城游戏"><a href="#地下城游戏" class="headerlink" title="地下城游戏"></a>地下城游戏</h1><p>一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</p><p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p><p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。</p><p>为了尽快到达公主，骑士决定<strong>每次只向右或向下移动一步</strong>。</p><p>编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。</p><p>例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -&gt; 右 -&gt; 下 -&gt; 下，则骑士的初始健康点数至少为 7。</p><div class="table-container"><table><thead><tr><th>-2（K）</th><th>-2</th><th>3</th></tr></thead><tbody><tr><td>-5</td><td>-10</td><td>1</td></tr><tr><td>10</td><td>30</td><td>-5（P）</td></tr></tbody></table></div><p><strong>说明:</strong></p><ul><li>骑士的健康点数没有上限。</li><li>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</li></ul><hr><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p>​    这道题可以看作是一个路径搜索问题，因此DFS肯定是可以解决的，只需要在回溯的过程中，维护当前路径上曾达到的最低健康值，以及当前位置的健康值即可。当然，由于过于暴力，某些case超时了Orz。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>​    动态规划的核心在于状态转移方程。对于动态规划来说，当前的最优状态仅由之前的状态决定，不会受到后面发生的事件的影响。当我们正向考虑这个问题时会发现，我们无法在不知道未来信息的情况下对当前状态做出决断。这是因为，前面的状态包含两个信息：当前路径上曾达到的最低健康值（也是我们的计算目标），当前位置的健康值。假设未来的路径中均为健康回复点，那么毫无疑问我们要选择当前路径上曾达到的最低健康值大的一者。而如果未来的路经中存在健康掉落点，那么我们可能需要选择当前位置健康值大的一者，这取决于未来路径的”恶劣程度”。</p><p>​    正向的动态规划行不通，那么不妨尝试负向的策略。维护一个动态规划数组<code>dp</code>，其中<code>dp[i][j]</code>代表$(i,j)$处出发需要的最小健康值。显然<code>dp[i][j]</code>的最小值是1,可以得到状态转移方程则为<code>dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])</code>。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculateMinimumHP</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; dungeon)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">int</span> height = dungeon.size();</span><br><span class="line">        <span class="hljs-keyword">int</span> width = dungeon[<span class="hljs-number">0</span>].size();</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; dp(height, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;(width,<span class="hljs-number">0</span>));</span><br><span class="line">        dp[height<span class="hljs-number">-1</span>][width<span class="hljs-number">-1</span>] = max(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>-dungeon[height<span class="hljs-number">-1</span>][width<span class="hljs-number">-1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = height<span class="hljs-number">-2</span>; i &gt;= <span class="hljs-number">0</span>; i--)</span><br><span class="line">            dp[i][width<span class="hljs-number">-1</span>] = max(<span class="hljs-number">1</span>, dp[i+<span class="hljs-number">1</span>][width<span class="hljs-number">-1</span>] - dungeon[i][width<span class="hljs-number">-1</span>]);</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = width - <span class="hljs-number">2</span>; j &gt;= <span class="hljs-number">0</span>; j--)</span><br><span class="line">            dp[height<span class="hljs-number">-1</span>][j] = max(<span class="hljs-number">1</span>, dp[height<span class="hljs-number">-1</span>][j+<span class="hljs-number">1</span>] - dungeon[height<span class="hljs-number">-1</span>][j]);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = height <span class="hljs-number">-2</span>; i &gt;= <span class="hljs-number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = width - <span class="hljs-number">2</span>; j &gt;= <span class="hljs-number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i][j] = max(<span class="hljs-number">1</span>, min(dp[i][j+<span class="hljs-number">1</span>], dp[i+<span class="hljs-number">1</span>][j]) - dungeon[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    在此基础上，可以压缩一下空间。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">calculateMinimumHP</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; dungeon)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">int</span> height = dungeon.size();</span><br><span class="line">        <span class="hljs-keyword">int</span> width = dungeon[<span class="hljs-number">0</span>].size();</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; dp(width, <span class="hljs-number">0</span>);</span><br><span class="line">        dp[width<span class="hljs-number">-1</span>] = max(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>-dungeon[height<span class="hljs-number">-1</span>][width<span class="hljs-number">-1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = width - <span class="hljs-number">2</span>; j &gt;= <span class="hljs-number">0</span>; j--)</span><br><span class="line">            dp[j] = max(<span class="hljs-number">1</span>, dp[j+<span class="hljs-number">1</span>] - dungeon[height<span class="hljs-number">-1</span>][j]);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = height <span class="hljs-number">-2</span>; i &gt;= <span class="hljs-number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[width - <span class="hljs-number">1</span>] = max(<span class="hljs-number">1</span>, dp[width<span class="hljs-number">-1</span>] - dungeon[i][width<span class="hljs-number">-1</span>]); </span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = width - <span class="hljs-number">2</span>; j &gt;= <span class="hljs-number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j] = max(<span class="hljs-number">1</span>, min(dp[j+<span class="hljs-number">1</span>], dp[j]) - dungeon[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度$O(mn)$, 空间复杂度$O(n)$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;地下城游戏&quot;&gt;&lt;a href=&quot;#地下城游戏&quot; class=&quot;headerlink&quot; title=&quot;地下城游戏&quot;&gt;&lt;/a&gt;地下城游戏&lt;/h1&gt;&lt;p&gt;一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="动态规划" scheme="SJTUGavinLiu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>leetcode164</title>
    <link href="SJTUGavinLiu.github.io/2020/02/05/leetcode164/"/>
    <id>SJTUGavinLiu.github.io/2020/02/05/leetcode164/</id>
    <published>2020-02-05T10:47:47.000Z</published>
    <updated>2020-02-05T10:48:21.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大间距"><a href="#最大间距" class="headerlink" title="最大间距"></a>最大间距</h1><p>给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。</p><p>如果数组元素个数小于 2，则返回 0。</p><p>（请尝试在线性时间复杂度和空间复杂度的条件下解决此问题）</p><hr><p>常规的排序时间复杂度为$O(n \log n)$。</p><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>针对这个问题，考虑到数的范围给定，可以采用基数排序得到一个$O(n)$的算法。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/radixSort.gif" alt="img"></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; num, <span class="hljs-keyword">int</span>&amp; <span class="hljs-built_in">exp</span>)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (num / <span class="hljs-built_in">exp</span>) % <span class="hljs-number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maximumGap</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(nums.size() &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> Max = INT_MIN; </span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num: nums)</span><br><span class="line">            Max = max(num, Max);</span><br><span class="line">        <span class="hljs-keyword">int</span> <span class="hljs-built_in">exp</span> = <span class="hljs-number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; tmp(nums.size(), <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">while</span>(Max / <span class="hljs-built_in">exp</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; count(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>);</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num: nums)</span><br><span class="line">            &#123;</span><br><span class="line">                count[getIndex(num, <span class="hljs-built_in">exp</span>)]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                count[i] += count[i<span class="hljs-number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = nums.size() - <span class="hljs-number">1</span>; i &gt;=<span class="hljs-number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp[--count[getIndex(nums[i], <span class="hljs-built_in">exp</span>)]] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++)</span><br><span class="line">                nums[i] = tmp[i];</span><br><span class="line"></span><br><span class="line">            <span class="hljs-built_in">exp</span> *= <span class="hljs-number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size() - <span class="hljs-number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res = max(res, nums[i+<span class="hljs-number">1</span>] - nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>桶排序的关键在于如何设置一个合理桶大小，最糟糕的情况是每个元素一个桶，这在元素之间大小差异过大时，无论是时间还是空间的开销都是过于昂贵的</p><p>假设有一个含$N$个元素的数组，最大值是$Max$,最小值是$Min$。那么其最大间距的最小值应该为$\lfloor \frac{(Max - Min)}{(N-1)}\rfloor + 1$（均匀分散的时候取到）。这就启发我们及那个桶的大小设置成$\lfloor \frac{(Max - Min)}{(N-1)}\rfloor + 1$。如此一来，我们的关注重点只需放在临近的桶上而不需要考虑桶内间距（这是因为桶内间距小于最大间距的最小值，没有参考价值）。</p><p>具体来说，可以给每个桶设置一个最大值，和最小值。每一次的比较只需要在上一个桶的最大值与当前桶的最小值之间进行（没有元素的桶跳过）。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">int</span> Max, Min;</span><br><span class="line">    <span class="hljs-keyword">int</span> bucketNum;</span><br><span class="line">    <span class="hljs-keyword">int</span> bucketSize;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span>&amp; num)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> (num - Min) / bucketSize;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maximumGap</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(nums.size() &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        Max = INT_MIN;</span><br><span class="line">        Min = INT_MAX;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num: nums)</span><br><span class="line">        &#123;</span><br><span class="line">            Max = max(Max, num);</span><br><span class="line">            Min = min(Min, num);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="hljs-keyword">if</span>(nums.size() == <span class="hljs-number">2</span>)    <span class="hljs-keyword">return</span> Max-Min;</span><br><span class="line">        bucketSize = (Max - Min) / (nums.size() - <span class="hljs-number">1</span>)+<span class="hljs-number">1</span>;</span><br><span class="line">        bucketNum = (Max - Min) / bucketSize;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//cout &lt;&lt; bucketSize &lt;&lt; ' ' &lt;&lt; bucketNum;</span></span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; bucketMax(bucketNum+<span class="hljs-number">1</span>, INT_MIN);</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; bucketMin(bucketNum+<span class="hljs-number">1</span>, INT_MAX);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num: nums)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> idx = getIndex(num);</span><br><span class="line">            bucketMax[idx] = max(bucketMax[idx], num);</span><br><span class="line">            bucketMin[idx] = min(bucketMin[idx] ,num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> pre = INT_MAX;</span><br><span class="line">        <span class="hljs-keyword">int</span> gap = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= bucketNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(bucketMax[i] == INT_MIN) <span class="hljs-keyword">continue</span>;</span><br><span class="line">            gap = max(gap, bucketMin[i] - pre);</span><br><span class="line">            pre = bucketMax[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> gap;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最大间距&quot;&gt;&lt;a href=&quot;#最大间距&quot; class=&quot;headerlink&quot; title=&quot;最大间距&quot;&gt;&lt;/a&gt;最大间距&lt;/h1&gt;&lt;p&gt;给定一个无序的数组，找出数组在排序之后，相邻元素之间最大的差值。&lt;/p&gt;
&lt;p&gt;如果数组元素个数小于 2，则返回 0。&lt;/p
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="排序" scheme="SJTUGavinLiu.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="桶排序" scheme="SJTUGavinLiu.github.io/tags/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    
      <category term="基数排序" scheme="SJTUGavinLiu.github.io/tags/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode152</title>
    <link href="SJTUGavinLiu.github.io/2020/02/04/leetcode152/"/>
    <id>SJTUGavinLiu.github.io/2020/02/04/leetcode152/</id>
    <published>2020-02-04T08:58:16.000Z</published>
    <updated>2020-02-04T08:59:19.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="乘积最大子序列"><a href="#乘积最大子序列" class="headerlink" title="乘积最大子序列"></a>乘积最大子序列</h1><p>给定一个整数数组 <code>nums</code> ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p><hr><p>注意到三个事实。</p><ol><li><p>含0的序列，$\min \max<em>\limits{i,j} \mathop{mul}(l</em>{ij}) = 0$ 。($l_{ij}$指子序列<code>nums[i,j]</code>) </p></li><li><p>经过0的子序列乘积为0</p></li><li>不含0且至少有一个正数的序列的最大乘积子序列里含偶数个负数。</li></ol><p>考虑到FACT 2，我们将序列拆分成不含0的子列分别考虑。</p><ul><li><p>如果子列含有的负数个数为偶数，其子序列乘积最大值就是其本身乘积最大值。</p></li><li><p>如果子列含有的负数个数为奇数，如下所示</p><p>${…,a<em>1,…….., a</em>{2k+1},…}$，（${a_n}$ 为负数数列）</p><p>其子序列乘积最大值为序列${…,a<em>1,…,a</em>{2k+1}} / {a<em>{2k+1}}$与序列${a_1,…,a</em>{2k+1},…} / {a_{1}}$二者中的乘积较大者。这是因为</p><ol><li>子序列长度增加，乘积单调不减。</li><li>不含0且至少有一个正数的序列的最大乘积子序列里含偶数个负数。</li></ol><p>针对这种情况，我们可以左右遍历，分别计算累积的最大乘积，取较大值即可。</p></li></ul><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> res = nums[<span class="hljs-number">0</span>];</span><br><span class="line">        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span>(i &lt; nums.size())</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">while</span>(i &lt; nums.size() &amp;&amp; nums[i] == <span class="hljs-number">0</span>)</span><br><span class="line">                i++;</span><br><span class="line">            <span class="hljs-keyword">int</span> j = i;    </span><br><span class="line">            <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span>(j &lt; nums.size() &amp;&amp; nums[j] != <span class="hljs-number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt *= nums[j];</span><br><span class="line">                res = max(res, cnt);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span>(j &lt; nums.size())</span><br><span class="line">                res = max(res, <span class="hljs-number">0</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="hljs-keyword">int</span> tmp = i;</span><br><span class="line">            i = j;</span><br><span class="line">            j--;</span><br><span class="line">            cnt = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span>(j &gt;= tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt *= nums[j];</span><br><span class="line">                res = max(res, cnt);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;乘积最大子序列&quot;&gt;&lt;a href=&quot;#乘积最大子序列&quot; class=&quot;headerlink&quot; title=&quot;乘积最大子序列&quot;&gt;&lt;/a&gt;乘积最大子序列&lt;/h1&gt;&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt; ，找出一个序列中乘积最大的连续子序列（该序列至
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="子序列" scheme="SJTUGavinLiu.github.io/tags/%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>leetcode149</title>
    <link href="SJTUGavinLiu.github.io/2020/02/03/leetcode149/"/>
    <id>SJTUGavinLiu.github.io/2020/02/03/leetcode149/</id>
    <published>2020-02-03T14:28:44.000Z</published>
    <updated>2020-02-03T14:34:27.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支线上最多的点数"><a href="#支线上最多的点数" class="headerlink" title="支线上最多的点数"></a>支线上最多的点数</h1><p>给定一个二维平面，平面上有 <em>n</em> 个点，求最多有多少个点在同一条直线上。</p><hr><p>从一个基点出发，遍历其他的点（$O(n^2)$），分别计算</p><ul><li>与基点重合点的数量（<code>same</code>）</li><li>经过基点不同斜率的直线上的点数（<code>dict[slope]</code>）</li></ul><p>取第一项的值与第二项中的最大值（<code>max_count</code>）之和为基点对应极大值，在遍历过程中更新结果。</p><p>我们的遍历是建立在确定的基点上的，因此只需斜率就可以唯一确定一条直线。考虑到浮点数的精度问题，我转而考虑用辗转相除法将<code>dx,dy</code>约化为最简形式并以<code>pair</code>的形式存储。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-comment">// x &lt; y</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> x == <span class="hljs-number">0</span> ? y : gcd(y % x, x);</span><br><span class="line">    &#125;</span><br><span class="line">    pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; getSlope(<span class="hljs-keyword">int</span> x1, <span class="hljs-keyword">int</span> y1, <span class="hljs-keyword">int</span> x2, <span class="hljs-keyword">int</span> y2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> dx = x1 - x2;</span><br><span class="line">        <span class="hljs-keyword">int</span> dy = y1 - y2;</span><br><span class="line">        <span class="hljs-keyword">if</span>(dy == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> &#123;y1, <span class="hljs-number">0</span>&#125;;</span><br><span class="line">        <span class="hljs-keyword">if</span>(dx == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>, x1&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">int</span> d = gcd(dx, dy);</span><br><span class="line">        <span class="hljs-keyword">return</span> &#123;dy / d, dx / d&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxPoints</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(points.size() &lt; <span class="hljs-number">3</span>)   <span class="hljs-keyword">return</span> points.size();</span><br><span class="line">        <span class="hljs-keyword">int</span> len = points.size();</span><br><span class="line">        <span class="hljs-comment">//int same = 0;</span></span><br><span class="line">        <span class="hljs-keyword">int</span> res = <span class="hljs-number">2</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">int</span> same = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">int</span> max_count = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-built_in">map</span>&lt;pair&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt;, <span class="hljs-keyword">int</span>&gt; dict;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; len; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(points[j][<span class="hljs-number">0</span>] == points[i][<span class="hljs-number">0</span>] &amp;&amp; points[j][<span class="hljs-number">1</span>] == points[i][<span class="hljs-number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    same++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; slope = getSlope(points[i][<span class="hljs-number">0</span>], points[i][<span class="hljs-number">1</span>], points[j][<span class="hljs-number">0</span>], points[j][<span class="hljs-number">1</span>]);</span><br><span class="line">                    <span class="hljs-keyword">if</span>(!dict.count(slope))</span><br><span class="line">                        dict[slope] = <span class="hljs-number">1</span>;</span><br><span class="line">                    <span class="hljs-keyword">else</span></span><br><span class="line">                        dict[slope]++;</span><br><span class="line">                    max_count = max(max_count, dict[slope]);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            res = max(res, same + max_count);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;支线上最多的点数&quot;&gt;&lt;a href=&quot;#支线上最多的点数&quot; class=&quot;headerlink&quot; title=&quot;支线上最多的点数&quot;&gt;&lt;/a&gt;支线上最多的点数&lt;/h1&gt;&lt;p&gt;给定一个二维平面，平面上有 &lt;em&gt;n&lt;/em&gt; 个点，求最多有多少个点在同一条直线上。&lt;/
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="哈希表" scheme="SJTUGavinLiu.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="斜率" scheme="SJTUGavinLiu.github.io/tags/%E6%96%9C%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>leetcode148</title>
    <link href="SJTUGavinLiu.github.io/2020/02/03/leetcode148/"/>
    <id>SJTUGavinLiu.github.io/2020/02/03/leetcode148/</id>
    <published>2020-02-03T14:26:36.000Z</published>
    <updated>2020-02-03T14:30:25.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序链表"><a href="#排序链表" class="headerlink" title="排序链表"></a>排序链表</h1><p>在 $O(n \log n)$ 时间复杂度和常数级空间复杂度下，对链表进行排序。</p><hr><p>注意到常数空间复杂度，递归的算法就可以先排除掉了。</p><p>一个简单的想法是自下而上地归并，函数<code>cut(head, step)</code>从头部截取<code>step</code>长度的子列表并返回下一段列表的起始节点。<code>merge</code>合并两个列表并返回尾部节点。</p><p><img src="/images/leetcode148.assets/1580708996056.png" alt="1580708996056"></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="hljs-comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode *next;</span></span><br><span class="line"><span class="hljs-comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="hljs-comment"> * &#125;;</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>: </span><br><span class="line">    <span class="hljs-function">ListNode* <span class="hljs-title">cut</span><span class="hljs-params">(ListNode* head, <span class="hljs-keyword">int</span> step)</span> <span class="hljs-comment">// divide a sublist with length 'step' off the list</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!head)   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="hljs-keyword">while</span>(p-&gt;next &amp;&amp; step<span class="hljs-number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            step--;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *tmp = p-&gt;next;</span><br><span class="line">        p-&gt;next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">        <span class="hljs-keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function">ListNode* <span class="hljs-title">merge</span><span class="hljs-params">(ListNode* r, ListNode* list1, ListNode* list2)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        ListNode* p = list1;</span><br><span class="line">        ListNode* q = list2;</span><br><span class="line">        <span class="hljs-keyword">while</span>(p || q)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(!q)</span><br><span class="line">            &#123;</span><br><span class="line">                r-&gt;next = p;</span><br><span class="line">                <span class="hljs-keyword">while</span>(p-&gt;next)</span><br><span class="line">                    p = p-&gt;next;</span><br><span class="line">                <span class="hljs-keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!p)</span><br><span class="line">            &#123;</span><br><span class="line">                r-&gt;next = q;</span><br><span class="line">                <span class="hljs-keyword">while</span>(q-&gt;next)</span><br><span class="line">                    q = q-&gt;next;</span><br><span class="line">                <span class="hljs-keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">if</span>(p-&gt;val &gt; q-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                r-&gt;next = q;</span><br><span class="line">                q = q-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                r-&gt;next = p;</span><br><span class="line">                p = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            r = r-&gt;next;</span><br><span class="line">            r-&gt;next = <span class="hljs-literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function">ListNode* <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(!head)   <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;</span><br><span class="line">        ListNode* dum = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">-1</span>);</span><br><span class="line">        dum-&gt;next = head;</span><br><span class="line">        <span class="hljs-keyword">int</span> step = <span class="hljs-number">1</span>;</span><br><span class="line">        ListNode* pre = dum;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pre = dum;</span><br><span class="line">            cur = dum-&gt;next;</span><br><span class="line">            cnt = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">while</span>(cur)</span><br><span class="line">            &#123;</span><br><span class="line">                ListNode* first = cur;</span><br><span class="line">                ListNode* second = cut(cur, step);</span><br><span class="line">                cur = cut(second, step);</span><br><span class="line">                pre = merge(pre, first, second);</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>(cnt == <span class="hljs-number">1</span>)    <span class="hljs-keyword">break</span>;</span><br><span class="line">            step *= <span class="hljs-number">2</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> dum-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序链表&quot;&gt;&lt;a href=&quot;#排序链表&quot; class=&quot;headerlink&quot; title=&quot;排序链表&quot;&gt;&lt;/a&gt;排序链表&lt;/h1&gt;&lt;p&gt;在 $O(n \log n)$ 时间复杂度和常数级空间复杂度下，对链表进行排序。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;注意到常数空间复杂
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="链表" scheme="SJTUGavinLiu.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="归并" scheme="SJTUGavinLiu.github.io/tags/%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>leetcode137</title>
    <link href="SJTUGavinLiu.github.io/2020/01/31/leetcode137/"/>
    <id>SJTUGavinLiu.github.io/2020/01/31/leetcode137/</id>
    <published>2020-01-31T03:12:01.000Z</published>
    <updated>2020-01-31T03:15:14.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="只出现一次数字Ⅱ"><a href="#只出现一次数字Ⅱ" class="headerlink" title="只出现一次数字Ⅱ"></a>只出现一次数字Ⅱ</h1><p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p><p>说明：</p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><hr><p>设计一个状态转移电路使得三次转换后能回到原始状态<code>00-&gt;01-&gt;10-&gt;00</code>。</p><p>先整一个状态转移矩阵</p><div class="table-container"><table><thead><tr><th>a</th><th>b</th><th>x</th><th>new_a</th><th>new_b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td></tr></tbody></table></div><p>画b的卡诺图</p><div class="table-container"><table><thead><tr><th>x\ab</th><th>00</th><th>01</th><th>11</th><th>10</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td><td>X</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td><td>X</td><td>0</td></tr></tbody></table></div><p>b = (b ^ x) &amp; ~a</p><p>画a的卡诺图</p><div class="table-container"><table><thead><tr><th>x\ab</th><th>00</th><th>01</th><th>11</th><th>10</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>X</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td><td>X</td><td>1</td></tr></tbody></table></div><p> a = (x &amp; b) | (~x &amp; a)</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> tmp;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : nums) &#123;</span><br><span class="line">            tmp = b;</span><br><span class="line">            b = (b ^ x) &amp; ~a;</span><br><span class="line">            a = (x &amp; tmp) | (~x &amp; a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于代码的实现中，每一位的计算并不是并行进行的，所以可以通过画一个行列由a,new_b,x构成的卡诺图来利用先生成的位。</p><div class="table-container"><table><thead><tr><th>x\a new_b</th><th>00</th><th>01</th><th>11</th><th>10</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td><td>X</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td><td>X</td><td>1</td></tr></tbody></table></div><p>a = (x ^ a) &amp; ~ new_b</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : nums) &#123;</span><br><span class="line">        b = (b ^ x) &amp; ~a;</span><br><span class="line">        a = (a ^ x) &amp; ~b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;只出现一次数字Ⅱ&quot;&gt;&lt;a href=&quot;#只出现一次数字Ⅱ&quot; class=&quot;headerlink&quot; title=&quot;只出现一次数字Ⅱ&quot;&gt;&lt;/a&gt;只出现一次数字Ⅱ&lt;/h1&gt;&lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="状态转移电路" scheme="SJTUGavinLiu.github.io/tags/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%94%B5%E8%B7%AF/"/>
    
      <category term="位运算" scheme="SJTUGavinLiu.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>leetcode135</title>
    <link href="SJTUGavinLiu.github.io/2020/01/30/leetcode135/"/>
    <id>SJTUGavinLiu.github.io/2020/01/30/leetcode135/</id>
    <published>2020-01-30T08:49:25.000Z</published>
    <updated>2020-02-03T14:33:34.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分发糖果"><a href="#分发糖果" class="headerlink" title="分发糖果"></a>分发糖果</h1><p>老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p><p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p><ul><li><p>每个孩子至少分配到 1 个糖果。</p></li><li><p>相邻的孩子中，评分高的孩子必须获得更多的糖果。</p></li></ul><p>那么这样下来，老师至少需要准备多少颗糖果呢？</p><hr><ul><li><p>思路一</p><p>看到这道题就开始脑补一段分数变化的折线图。显然我们特别需要关注的是折线图的高峰和低谷，最理想的情况是每一个低谷的位置都是一颗糖果（如果一位同学夹在俩大佬之间真是有够惨的233） ，高峰处根据左右两侧的上升，选择较大的一者。根据这一思路，可以从左右两次遍历数组，每次给上升的一面赋值（包括峰值点）。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(ratings.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> len = ratings.size();</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; candies(len, <span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">bool</span> up = <span class="hljs-number">0</span>;    <span class="hljs-comment">// Status: up</span></span><br><span class="line">        <span class="hljs-comment">//int pos = 0;    //postition of base</span></span><br><span class="line">        <span class="hljs-comment">//up = ratings[1] &gt; ratings[0];</span></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ; i &lt; len - <span class="hljs-number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(ratings[i] &lt; ratings[i+<span class="hljs-number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(!up)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="hljs-comment">// reset base</span></span><br><span class="line">                    up = <span class="hljs-number">1</span>;</span><br><span class="line">                    candies[i] = <span class="hljs-number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                candies[i+<span class="hljs-number">1</span>] = candies[i] + <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ratings[i] == ratings[i+<span class="hljs-number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(up)  candies[i+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(up)  up = <span class="hljs-number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment">//up = ratings[len-1] &lt; ratings[len-2];</span></span><br><span class="line">        up = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len <span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(ratings[i] &lt; ratings[i<span class="hljs-number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(!up)</span><br><span class="line">                &#123;</span><br><span class="line">                    candies[i] = <span class="hljs-number">1</span>;</span><br><span class="line">                    up = <span class="hljs-number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="hljs-keyword">if</span>(candies[i<span class="hljs-number">-1</span>] &lt; candies[i] + <span class="hljs-number">1</span>)</span><br><span class="line">                    candies[i<span class="hljs-number">-1</span>] = candies[i] + <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ratings[i<span class="hljs-number">-1</span>] == ratings[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(up &amp;&amp; candies[i<span class="hljs-number">-1</span>] &lt; <span class="hljs-number">1</span>)</span><br><span class="line">                    candies[i<span class="hljs-number">-1</span>] = <span class="hljs-number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(up)  up = <span class="hljs-number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += candies[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum += candies[<span class="hljs-number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>思路二</p><p>事实上，当<code>candies</code>数组已经被初始化为1时，我根本无需去对相等的情况进行特别的考虑，所以<code>up</code>这个变量就不再必要了。精简一下代码可以得到。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(ratings.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> len = ratings.size();</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; candies(len, <span class="hljs-number">1</span>);</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(ratings[i] &lt; ratings[i+<span class="hljs-number">1</span>])</span><br><span class="line">                candies[i+<span class="hljs-number">1</span>] = candies[i] + <span class="hljs-number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(ratings[i] &lt; ratings[i<span class="hljs-number">-1</span>])</span><br><span class="line">                candies[i<span class="hljs-number">-1</span>] = max(candies[i] + <span class="hljs-number">1</span>, candies[i<span class="hljs-number">-1</span>]);</span><br><span class="line">            sum += candies[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum += candies[<span class="hljs-number">0</span>];</span><br><span class="line">        <span class="hljs-keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>思路三</p><p>思路三来自官方题解Orz。这个算法只需要用到常数的空间，思路本身并不难想到——通过考虑每一座山（一个峰）的上升次数和下降次数计算其消耗的最小糖果量。问题的关键在于如何细分每一次山的结束。</p><ol><li>之前一次的状态下降，当前状态上升：当前的山结束，将谷底计入下一座山中</li><li>之前一次的状态下降，当前状态平行：由于两个相同分数的小孩之间没有糖果数量限制，事实上这时候也相当于来到一个谷底了，当前山结束。</li><li>之前一次的状态上升，当前状态下降：此时山开始步入下行，继续发展。</li><li>之前一次的状态上升，当前状态平行：类似情况2，相当于进入谷底，当前山结束。</li></ol><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n )</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> n*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; ratings)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(ratings.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> len = ratings.size();</span><br><span class="line">        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> last = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> up = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> down = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(ratings[i+<span class="hljs-number">1</span>] &gt; ratings[i])   cur = <span class="hljs-number">1</span>;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ratings[i+<span class="hljs-number">1</span>] &lt; ratings[i])  cur = <span class="hljs-number">-1</span>;</span><br><span class="line">            <span class="hljs-keyword">else</span>    cur = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>((last == <span class="hljs-number">-1</span> &amp;&amp; cur &gt;= <span class="hljs-number">0</span>) || (last == <span class="hljs-number">1</span> &amp;&amp; cur == <span class="hljs-number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                sum = sum + cal(up) + cal(down) + max(up,down);</span><br><span class="line">                up = <span class="hljs-number">0</span>;</span><br><span class="line">                down = <span class="hljs-number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span>(cur == <span class="hljs-number">1</span>)</span><br><span class="line">                up++;</span><br><span class="line">            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur == <span class="hljs-number">-1</span>)</span><br><span class="line">                down++;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">                sum++;</span><br><span class="line">            last = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum + cal(up) + cal(down) + max(up,down) + <span class="hljs-number">1</span>; <span class="hljs-comment">//补上最后一个点的基数</span></span><br><span class="line">        <span class="hljs-keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分发糖果&quot;&gt;&lt;a href=&quot;#分发糖果&quot; class=&quot;headerlink&quot; title=&quot;分发糖果&quot;&gt;&lt;/a&gt;分发糖果&lt;/h1&gt;&lt;p&gt;老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。&lt;/p&gt;
&lt;p&gt;你需要按照以
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="贪心" scheme="SJTUGavinLiu.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>leetcode132</title>
    <link href="SJTUGavinLiu.github.io/2020/01/30/leetcode132/"/>
    <id>SJTUGavinLiu.github.io/2020/01/30/leetcode132/</id>
    <published>2020-01-30T02:31:56.000Z</published>
    <updated>2020-02-06T07:47:49.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分割回文串Ⅱ"><a href="#分割回文串Ⅱ" class="headerlink" title="分割回文串Ⅱ"></a>分割回文串Ⅱ</h1><p>给定一个字符串 <em>s</em>，将 <em>s</em> 分割成一些子串，使每个子串都是回文串。</p><p>返回符合要求的最少分割次数。</p><hr><ul><li><p>思路一</p><p>设置动态规划数组<code>dp</code>,<code>dp[i]</code>代表<code>s[:i-1]</code>的minCut。这个做法确实太暴力了，回文串的判定过程中产生了大量冗余计算，例如在判定“abcba”的过程中，事实上我们也知道了“bcb”是回文串。但在这个算法中这些信息并没有得到利用。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isPalin</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> right = s.size() - <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">while</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(s[left] != s[right])</span><br><span class="line">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">            left++;</span><br><span class="line">            right--;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minCut</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s.empty())   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> len = s.size();</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; dp(len+<span class="hljs-number">1</span>,INT_MAX);</span><br><span class="line">        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = j; i &gt;= <span class="hljs-number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(isPalin(s.substr(i,j-i+<span class="hljs-number">1</span>)))</span><br><span class="line">                    dp[j+<span class="hljs-number">1</span>] = min(dp[j+<span class="hljs-number">1</span>],<span class="hljs-number">1</span>+dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> dp[len];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>思路二</p><p>一个简单的思路的方法是通过$O(n^2)$中心扩散算法先计算出所有字串中的回文串以此简化计算量。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">int</span> len;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SearchPalin</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp;s, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&gt;&amp; isPalin, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; len &amp;&amp; s[i] == s[j])</span><br><span class="line">        &#123;</span><br><span class="line">            isPalin[i][j] = <span class="hljs-number">1</span>;</span><br><span class="line">            i--;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minCut</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s.empty())   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        len = s.size();</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;&gt; isPalin(len, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">bool</span>&gt;(len,<span class="hljs-number">0</span>));</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            SearchPalin(s, isPalin, i, i);</span><br><span class="line">            SearchPalin(s, isPalin, i, i+<span class="hljs-number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; dp(len+<span class="hljs-number">1</span>,INT_MAX);</span><br><span class="line">        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;</span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = j; i &gt;= <span class="hljs-number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="hljs-keyword">if</span>(isPalin[i][j])</span><br><span class="line">                    dp[j+<span class="hljs-number">1</span>] = min(dp[j+<span class="hljs-number">1</span>],<span class="hljs-number">1</span>+dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> dp[len];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>思路三</p><p>思路二中的方法需要用到$O(n^2)$的空间，事实上我们也可以用$O(1)$的空间实现同样的效果。（然而Leetcode给的内存消耗比思路二高了好多（大雾</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line">    <span class="hljs-keyword">int</span> len;</span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">helper</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; dp)</span></span></span><br><span class="line"><span class="hljs-function">    </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">while</span>(left &gt;= <span class="hljs-number">0</span> &amp;&amp; right &lt; len &amp;&amp; s[left] == s[right])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(left == <span class="hljs-number">0</span>)</span><br><span class="line">                dp[right] = <span class="hljs-number">0</span>;</span><br><span class="line">            <span class="hljs-keyword">else</span></span><br><span class="line">                dp[right] = min (dp[right], dp[left<span class="hljs-number">-1</span>] + <span class="hljs-number">1</span>); </span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minCut</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(s.empty())   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        len = s.size();</span><br><span class="line">        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; dp(len,INT_MAX);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span> ; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            helper(s,i,i,dp);</span><br><span class="line">            helper(s,i,i+<span class="hljs-number">1</span>,dp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> dp.back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分割回文串Ⅱ&quot;&gt;&lt;a href=&quot;#分割回文串Ⅱ&quot; class=&quot;headerlink&quot; title=&quot;分割回文串Ⅱ&quot;&gt;&lt;/a&gt;分割回文串Ⅱ&lt;/h1&gt;&lt;p&gt;给定一个字符串 &lt;em&gt;s&lt;/em&gt;，将 &lt;em&gt;s&lt;/em&gt; 分割成一些子串，使每个子串都是回文串。&lt;/p
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="动态规划" scheme="SJTUGavinLiu.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="回文串" scheme="SJTUGavinLiu.github.io/tags/%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>leetcode128</title>
    <link href="SJTUGavinLiu.github.io/2020/01/29/leetcode128/"/>
    <id>SJTUGavinLiu.github.io/2020/01/29/leetcode128/</id>
    <published>2020-01-29T06:23:41.000Z</published>
    <updated>2020-02-03T14:34:20.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最长连续序列"><a href="#最长连续序列" class="headerlink" title="最长连续序列"></a>最长连续序列</h1><p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 <em>O(n)</em>。</p><hr><p>最直接的想法是排序加遍历，但是不符合时间复杂度线性的要求。</p><ul><li><p>思路</p><p>直观上，我们希望在一遍扫描数组的过程中，对每一个数做如下操作</p><ol><li>和已有的序列结合形成新序列</li><li>自己独立生成一个序列</li></ol><p>为了实现这一想法，我用HashMap来存储每一个数所处序列的长度。对于遍历到的每一个数，我们都根据其左右两个数的序列长度来计算总长度，并对两个端点进行更新。我们可以注意到，此时除了端点，序列内其他点在HashMap中的长度并不是其所处序列的长度。这一点是可以接受的，因为我们每次考虑的都是新加入HashMap的数，不可能存在落入已有序列的可能性。</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">longestConsecutive</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">if</span>(nums.empty())    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; dict;</span><br><span class="line">        <span class="hljs-keyword">int</span> left, right, curLen;</span><br><span class="line">        <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; num: nums)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span>(!dict.count(num))</span><br><span class="line">            &#123;</span><br><span class="line">                left = dict.count(num<span class="hljs-number">-1</span>) ? dict[num<span class="hljs-number">-1</span>] : <span class="hljs-number">0</span>;</span><br><span class="line">                right = dict.count(num+<span class="hljs-number">1</span>) ? dict[num+<span class="hljs-number">1</span>] : <span class="hljs-number">0</span>;</span><br><span class="line">                </span><br><span class="line">                curLen = left + right + <span class="hljs-number">1</span>;</span><br><span class="line">                maxLen = maxLen &gt; curLen ? maxLen : curLen;</span><br><span class="line"></span><br><span class="line">                dict[num] = curLen; <span class="hljs-comment">// take the place</span></span><br><span class="line">                dict[num - left] = curLen;</span><br><span class="line">                dict[num + right] = curLen;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> maxLen;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最长连续序列&quot;&gt;&lt;a href=&quot;#最长连续序列&quot; class=&quot;headerlink&quot; title=&quot;最长连续序列&quot;&gt;&lt;/a&gt;最长连续序列&lt;/h1&gt;&lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
&lt;p&gt;要求算法的时间复杂度为 &lt;em&gt;O(n)&lt;
      
    
    </summary>
    
    
      <category term="文档" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
      <category term="leetcode" scheme="SJTUGavinLiu.github.io/categories/%E6%96%87%E6%A1%A3/leetcode/"/>
    
    
      <category term="哈希表" scheme="SJTUGavinLiu.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
      <category term="子序列" scheme="SJTUGavinLiu.github.io/tags/%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
</feed>
