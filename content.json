{"pages":[],"posts":[{"title":"leetcode126","text":"单词接龙Ⅱ给定两个单词（beginWord 和 endWord）和一个字典 wordList，找出所有从 beginWord 到 endWord 的最短转换序列。转换需遵循如下规则： 每次转换只能改变一个字母。 转换过程中的中间单词必须是字典中的单词。说明: 如果不存在这样的转换序列，返回一个空列表。 所有单词具有相同的长度。 所有单词只由小写字母组成。 字典中不存在重复的单词。 你可以假设 beginWord 和 endWord 是非空的，且二者不相同。 题目的思路是比较明晰的，先通过BFS找到最短路径，再backtrack出所有路径即可。 思路一 BFS的过程中记录下每层的单词，这样利用这个信息进行回溯。这个思路在碰到长WordList就行不通了，原因在于每层的单词数量过多，导致回溯的开销爆炸-.- 思路二 存储每层的单词显然行不通了，于是就想到了通过在BFS的过程中建立一个记录层次间连接的邻接表（Adjacent List）来加速回溯的过程。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384class Solution {private: int wordLen; string end;public: bool isAjac(string a, string b) { // 0: not ajacent or same // 1: ajacent bool flag = 0; for(int i = 0; i &lt; wordLen; i++) { if(flag &amp;&amp; a[i] != b[i]) return 0; if(a[i] != b[i]) flag = 1; } return flag; } void backtrack(string cur, vector&lt;vector&lt;string&gt;&gt; &amp;res, vector&lt;string&gt; &amp;tmp, unordered_map&lt;string, vector&lt;string&gt;&gt;&amp; nextStep) { if(isAjac(cur,end)) { tmp.push_back(end); res.push_back(tmp); tmp.pop_back(); } else { for(auto word: nextStep[cur]) { tmp.push_back(word); backtrack(word, res, tmp, nextStep); tmp.pop_back(); } } } vector&lt;vector&lt;string&gt;&gt; findLadders(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) { vector&lt;vector&lt;string&gt;&gt; res; unordered_set&lt;string&gt; s(wordList.begin(), wordList.end()); if(!s.count(endWord)) return res; wordLen = beginWord.size(); end = endWord; unordered_set&lt;string&gt; p{beginWord}; unordered_set&lt;string&gt; q; unordered_map&lt;string, vector&lt;string&gt;&gt; nextStep; // To store words that can be reached from the given word. bool flag = 0; // when the path has been found, flag = 1 while(!p.empty() &amp;&amp; !flag) { for(auto iter1 = p.begin(); iter1 != p.end(); iter1++) { for(auto iter2 = s.begin(); iter2 != s.end(); iter2++) { if(isAjac(*iter1, *iter2)) { if(*iter2 == endWord) flag = 1; nextStep[*iter1].push_back(*iter2); q.insert(*iter2); } } } for(auto iter = q.begin(); iter != q.end(); iter++) { s.erase(*iter); } swap(p,q); q.clear(); } vector&lt;string&gt; tmp(1, beginWord); if(flag) { backtrack(beginWord, res, tmp, nextStep); } return res; }}; 思路三 可以通过双向BFS进一步提升算法效率 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222class Solution {private: int wordLen; string end;public: bool isAjac(string a, string b) { // 0: not ajacent or same // 1: ajacent bool flag = 0; for(int i = 0; i &lt; wordLen; i++) { if(flag &amp;&amp; a[i] != b[i]) return 0; if(a[i] != b[i]) flag = 1; } return flag; } void backtrack(string&amp; cur, vector&lt;vector&lt;string&gt;&gt;&amp; res, vector&lt;string&gt;&amp; tmp, unordered_map&lt;string, vector&lt;string&gt;&gt;&amp; nextStep) { if(isAjac(cur,end)) { tmp.push_back(end); res.push_back(tmp); tmp.pop_back(); } else { for(auto word: nextStep[cur]) { tmp.push_back(word); backtrack(word, res, tmp, nextStep); tmp.pop_back(); } } } vector&lt;vector&lt;string&gt;&gt; findLadders(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) { vector&lt;vector&lt;string&gt;&gt; res; unordered_set&lt;string&gt; s(wordList.begin(), wordList.end()); if(!s.count(endWord)) return res; wordLen = beginWord.size(); end = endWord; unordered_set&lt;string&gt; p{beginWord}; unordered_set&lt;string&gt; q; unordered_map&lt;string, vector&lt;string&gt;&gt; nextStep; // To store words that can be reached from the given word. bool flag = 0; // when the path has been found, flag = 1 while(!p.empty() &amp;&amp; !flag) { for(auto iter = p.begin(); iter != p.end(); iter++) { string str = *iter; for(int i = 0; i &lt; wordLen; i++) { char c = str[i]; for(char j = 'a'; j &lt;= 'z'; j++) { str[i] = j; if(str == endWord) flag = 1; if(s.count(str)) { nextStep[*iter].push_back(str); q.insert(str); } } str[i] = c; } } for(auto iter = q.begin(); iter != q.end(); iter++) { s.erase(*iter); } swap(p,q); q.clear(); } if(flag) { vector&lt;string&gt; tmp(1, beginWord); backtrack(beginWord, res, tmp, nextStep); } return res; }};/* Solution 3 Bidirectional BFS*/static const auto __ = []() { ios::sync_with_stdio(false); cin.tie(nullptr); return nullptr;}();class Solution {private: int wordLen; string end;public: bool isAjac(string&amp; a, string&amp; b) { // 0: not ajacent or same // 1: ajacent bool flag = 0; for(int i = 0; i &lt; wordLen; i++) { if(flag &amp;&amp; a[i] != b[i]) return 0; if(a[i] != b[i]) flag = 1; } return flag; } void backtrack(string&amp; cur, vector&lt;vector&lt;string&gt;&gt;&amp; res, vector&lt;string&gt;&amp; tmp, unordered_map&lt;string, vector&lt;string&gt;&gt;&amp; nextStep) { if(isAjac(cur,end)) { tmp.push_back(end); res.push_back(tmp); tmp.pop_back(); } else { for(auto&amp; word: nextStep[cur]) { tmp.push_back(word); backtrack(word, res, tmp, nextStep); tmp.pop_back(); } } } vector&lt;vector&lt;string&gt;&gt; findLadders(string beginWord, string endWord, vector&lt;string&gt;&amp; wordList) { vector&lt;vector&lt;string&gt;&gt; res; unordered_set&lt;string&gt; s(wordList.begin(), wordList.end()); if(!s.count(endWord)) return res; wordLen = beginWord.size(); end = endWord; unordered_set&lt;string&gt; p1{beginWord}; unordered_set&lt;string&gt; p2{endWord}; unordered_set&lt;string&gt; q; unordered_map&lt;string, vector&lt;string&gt;&gt; nextStep; // To store words that can be reached from the given word. bool flag = 0; // when the path has been found, flag = 1 bool back = 0; // when the direction of BFS is backward, back = 1 s.erase(endWord); while(!p1.empty() &amp;&amp; !p2.empty() &amp;&amp; !flag) { if(p1.size() &gt; p2.size()) { swap(p1,p2); back = !back; } for (const string&amp; w : p1) s.erase(w); for (const string&amp; w : p2) s.erase(w); for(auto iter = p1.begin(); iter != p1.end(); iter++) { string str = *iter; for(int i = 0; i &lt; wordLen; i++) { char c = str[i]; for(char j = 'a'; j &lt;= 'z'; j++) { str[i] = j; if(p2.count(str)) { flag = 1; if(back) nextStep[str].push_back(*iter); else nextStep[*iter].push_back(str); } if(s.count(str)) { if(back) nextStep[str].push_back(*iter); else nextStep[*iter].push_back(str); q.insert(str); } } str[i] = c; } } swap(p1,q); q.clear(); } if(flag) { vector&lt;string&gt; tmp(1, beginWord); backtrack(beginWord, res, tmp, nextStep); } return res; }};","link":"/2020/01/29/leetcode126/"},{"title":"GET&POST&AJAX","text":"最近整了点web相关的工作，借此整理了一下HTTP请求相关的内容。 HTTP (Hyper Text Transfer Protocol)HTTP-超文本传输协议工作于Server-Client架构上，浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。 而GET和POST则是HTTP最常用的两个方法。 GET &amp; POST先搬运一段维基百科上的定义 GETGET requests a representation of the specified resource. Note that GET should NOT be used for operations that cause side-effects, such as using it for taking actions in web applications. One reason for this is that GET may be used arbitrarily by robots or crawlers, which should not need to consider the side effects that a request should cause. POSTPOST submits data to be processed (e.g., from an HTML form) to the identified resource. The data is included in the body of the request. This may result in the creation of a new resource or the updates of existing resources or both. 由此可以看出，GET代表一个幂等（Idempotent）的读取操作，而POST则代表一个不幂等的更新操作。 所谓幂等，即任意多次执行所产生的影响均与依次执行的影响相同。 JQuery AJAX get() &amp; post()AJAX - Asynchronous Javascript And XML 无需重新加载整个网页更新部分网页的技术 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/* get */$.get(URL,callback); /* example */$.get('http://127.0.0.1:5000/data',function(data,status){ console.log(data);});/* post */$.post(URL,data,callback)/* example */$.post('http://127.0.0.1:5000/data',{ name: 'gavin'},function(data,status){ console.log(data);});/* ajax template example */$.ajax({ type: 'get', url: 'http://127.0.0.1:5000/demo/data', dataType: \"jsonp\", // request format: jsonp success: function (res) { console.log(res); }, error: function (msg) { console.log(msg); }}); $.ajax({ type: 'post', url: 'http://127.0.0.1:5000/demo/data', data: JSON.stringify({'trans': trans, \"core\": core, \"year\": year, \"month\": month}), dataType: \"jsonp\", contentType: \"application/json; charset=utf-8\", success: function (res) { console.log(res); }, error: function (msg) { console.log(msg); }});","link":"/2020/01/28/GET&POST&AJAX/"},{"title":"leetcode135","text":"分发糖果老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。 你需要按照以下要求，帮助老师给这些孩子分发糖果： 每个孩子至少分配到 1 个糖果。 相邻的孩子中，评分高的孩子必须获得更多的糖果。 那么这样下来，老师至少需要准备多少颗糖果呢？ 思路一 看到这道题就开始脑补一段分数变化的折线图。显然我们特别需要关注的是折线图的高峰和低谷，最理想的情况是每一个低谷的位置都是一颗糖果（如果一位同学夹在俩大佬之间真是有够惨的233） ，高峰处根据左右两侧的上升，选择较大的一者。根据这一思路，可以从左右两次遍历数组，每次给上升的一面赋值（包括峰值点）。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566class Solution {public: int candy(vector&lt;int&gt;&amp; ratings) { if(ratings.empty()) return 0; int len = ratings.size(); int sum = 0; vector&lt;int&gt; candies(len, 1); bool up = 0; // Status: up //int pos = 0; //postition of base //up = ratings[1] &gt; ratings[0]; for(int i = 0 ; i &lt; len - 1; i++) { if(ratings[i] &lt; ratings[i+1]) { if(!up) { // reset base up = 1; candies[i] = 1; } candies[i+1] = candies[i] + 1; } else if(ratings[i] == ratings[i+1]) { if(up) candies[i+1] = 1; } else { if(up) up = 0; } } //up = ratings[len-1] &lt; ratings[len-2]; up = 0; for(int i = len -1; i &gt;= 1; i--) { if(ratings[i] &lt; ratings[i-1]) { if(!up) { candies[i] = 1; up = 1; } if(candies[i-1] &lt; candies[i] + 1) candies[i-1] = candies[i] + 1; } else if(ratings[i-1] == ratings[i]) { if(up &amp;&amp; candies[i-1] &lt; 1) candies[i-1] = 1; } else { if(up) up = 0; } sum += candies[i]; } sum += candies[0]; return sum; }}; 思路二 事实上，当candies数组已经被初始化为1时，我根本无需去对相等的情况进行特别的考虑，所以up这个变量就不再必要了。精简一下代码可以得到。 123456789101112131415161718192021222324class Solution {public: int candy(vector&lt;int&gt;&amp; ratings) { if(ratings.empty()) return 0; int len = ratings.size(); int sum = 0; vector&lt;int&gt; candies(len, 1); for(int i = 0; i &lt; len - 1; i++) { if(ratings[i] &lt; ratings[i+1]) candies[i+1] = candies[i] + 1; } for(int i = len - 1; i &gt;= 1; i--) { if(ratings[i] &lt; ratings[i-1]) candies[i-1] = max(candies[i] + 1, candies[i-1]); sum += candies[i]; } sum += candies[0]; return sum; }}; 思路三 思路三来自官方题解Orz。这个算法只需要用到常数的空间，思路本身并不难想到——通过考虑每一座山（一个峰）的上升次数和下降次数计算其消耗的最小糖果量。问题的关键在于如何细分每一次山的结束。 之前一次的状态下降，当前状态上升：当前的山结束，将谷底计入下一座山中 之前一次的状态下降，当前状态平行：由于两个相同分数的小孩之间没有糖果数量限制，事实上这时候也相当于来到一个谷底了，当前山结束。 之前一次的状态上升，当前状态下降：此时山开始步入下行，继续发展。 之前一次的状态上升，当前状态平行：类似情况2，相当于进入谷底，当前山结束。 1234567891011121314151617181920212223242526272829303132333435363738394041class Solution {public: int cal(int n ) { return n*(n+1)/2; } int candy(vector&lt;int&gt;&amp; ratings) { if(ratings.empty()) return 0; int len = ratings.size(); int sum = 0; int cur = 0; int last = 0; int up = 0; int down = 0; for(int i = 0; i &lt; len - 1; i++) { if(ratings[i+1] &gt; ratings[i]) cur = 1; else if(ratings[i+1] &lt; ratings[i]) cur = -1; else cur = 0; if((last == -1 &amp;&amp; cur &gt;= 0) || (last == 1 &amp;&amp; cur == 0)) { sum = sum + cal(up) + cal(down) + max(up,down); up = 0; down = 0; } if(cur == 1) up++; else if(cur == -1) down++; else sum++; last = cur; } sum = sum + cal(up) + cal(down) + max(up,down) + 1; //补上最后一个点的基数 return sum; }};","link":"/2020/01/30/leetcode135/"},{"title":"leetcode132","text":"分割回文串Ⅱ给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。 返回符合要求的最少分割次数。 思路一 设置动态规划数组dp,dp[i]代表s[:i-1]的minCut。这个做法确实太暴力了，回文串的判定过程中产生了大量冗余计算，例如在判定“abcba”的过程中，事实上我们也知道了“bcb”是回文串。但在这个算法中这些信息并没有得到利用。 12345678910111213141516171819202122232425262728293031class Solution {public: bool isPalin(string s) { int left = 0; int right = s.size() - 1; while(left &lt; right) { if(s[left] != s[right]) return false; left++; right--; } return true; } int minCut(string s) { if(s.empty()) return 0; int len = s.size(); vector&lt;int&gt; dp(len+1,INT_MAX); dp[0] = -1; for(int j = 0; j &lt; len; j++) { for(int i = j; i &gt;= 0; i--) { if(isPalin(s.substr(i,j-i+1))) dp[j+1] = min(dp[j+1],1+dp[i]); } } return dp[len]; }}; 思路二 一个简单的思路的方法是通过$O(n^2)$中心扩散算法先计算出所有字串中的回文串以此简化计算量。 12345678910111213141516171819202122232425262728293031323334353637class Solution {private: int len;public: void SearchPalin(string&amp;s, vector&lt;vector&lt;bool&gt;&gt;&amp; isPalin, int i, int j) { while(i &gt;= 0 &amp;&amp; j &lt; len &amp;&amp; s[i] == s[j]) { isPalin[i][j] = 1; i--; j++; } } int minCut(string s) { if(s.empty()) return 0; len = s.size(); vector&lt;vector&lt;bool&gt;&gt; isPalin(len, vector&lt;bool&gt;(len,0)); for(int i = 0; i &lt; len; i++) { SearchPalin(s, isPalin, i, i); SearchPalin(s, isPalin, i, i+1); } vector&lt;int&gt; dp(len+1,INT_MAX); dp[0] = -1; for(int j = 0; j &lt; len; j++) { for(int i = j; i &gt;= 0; i--) { if(isPalin[i][j]) dp[j+1] = min(dp[j+1],1+dp[i]); } } return dp[len]; }}; 思路三 思路二中的方法需要用到$O(n^2)$的空间，事实上我们也可以用$O(1)$的空间实现同样的效果。（然而Leetcode给的内存消耗比思路二高了好多（大雾 1234567891011121314151617181920212223242526272829class Solution {private: int len;public: void helper(string s, int left, int right, vector&lt;int&gt;&amp; dp) { while(left &gt;= 0 &amp;&amp; right &lt; len &amp;&amp; s[left] == s[right]) { if(left == 0) dp[right] = 0; else dp[right] = min (dp[right], dp[left-1] + 1); left--; right++; } } int minCut(string s) { if(s.empty()) return 0; len = s.size(); vector&lt;int&gt; dp(len,INT_MAX); for(int i =0 ; i &lt; len; i++) { helper(s,i,i,dp); helper(s,i,i+1,dp); } return dp.back(); }};","link":"/2020/01/30/leetcode132/"},{"title":"leetcode128","text":"最长连续序列给定一个未排序的整数数组，找出最长连续序列的长度。 要求算法的时间复杂度为 O(n)。 最直接的想法是排序加遍历，但是不符合时间复杂度线性的要求。 思路 直观上，我们希望在一遍扫描数组的过程中，对每一个数做如下操作 和已有的序列结合形成新序列 自己独立生成一个序列 为了实现这一想法，我用HashMap来存储每一个数所处序列的长度。对于遍历到的每一个数，我们都根据其左右两个数的序列长度来计算总长度，并对两个端点进行更新。我们可以注意到，此时除了端点，序列内其他点在HashMap中的长度并不是其所处序列的长度。这一点是可以接受的，因为我们每次考虑的都是新加入HashMap的数，不可能存在落入已有序列的可能性。 12345678910111213141516171819202122232425262728class Solution {public: int longestConsecutive(vector&lt;int&gt;&amp; nums) { if(nums.empty()) return 0; unordered_map&lt;int, int&gt; dict; int left, right, curLen; int maxLen = 1; for(auto&amp; num: nums) { if(!dict.count(num)) { left = dict.count(num-1) ? dict[num-1] : 0; right = dict.count(num+1) ? dict[num+1] : 0; curLen = left + right + 1; maxLen = maxLen &gt; curLen ? maxLen : curLen; dict[num] = curLen; // take the place dict[num - left] = curLen; dict[num + right] = curLen; } } return maxLen; }};","link":"/2020/01/29/leetcode128/"},{"title":"同时在Github与Coding上部署Hexo","text":"配置SSH公钥我们可以通过SSH公钥来访问仓库，生成公钥的操作如下（配置的过程默认即可） 1ssh-keygen -t rsa -C &lt;your_email@example.com&gt; 将生成的id_rsa.pub内容添加到Coding与Github的SSH公钥即可。 之后我们就可以直接对仓库进行操作，而不需要输入用户名和密码了，例如 12git@git.coding.net:Gavin_liudu/Gavin_liudu.coding.me.gitgit@github.com:SJTUGavinLiu/SJTUGavinLiu.github.io.git 之后在blog根目录下的_config.yml中如下设置即可 12345deploy: type: git repo: github: https://github.com/SJTUGavinLiu/SJTUGavinLiu.github.io.git,master coding: git@git.coding.net:Gavin_liudu/Gavin_liudu.coding.me.git,master 个人域名绑定在阿里云的域名列表中加入记录 主机记录www，记录类型A，记录值是IP地址， 设置主机记录@，记录类型CNAME，记录值是Page页面地址 文本内的图片插入一开始有考虑用图床来实现图片的中转，但是有两个问题还是让我放弃这一个想法 图床存在挂掉的可能性（图床挂了，页面里的图片就全崩了，恢复极其麻烦） 由于我平时习惯用typora来写一些内容，所以图片都默认使用相对路径的形式在文本中进行标识。图床多出了上传图片并修改文本中图片地址的过程，实在麻烦 因此我还是选择了把图片存在了source/images/的路径下，通过相对路径的形式调取。 GIT LFS的引入Git在存储二进制文件，例如音频，图像，视频等的时候效率不高，因为Git默认会压缩并存储二进制文件的所有完整版本。由于我选择将图片存入仓库中，随着博文数量的增加，Git仓库文件会不断地增长，最终超出容量的上界。 针对这个问题，Git-LFS提供了一个合理的解决方案，即只在真正的Git仓库中保存二进制文件的哈希等数据，而将真实的文件存储在GIT-LFS的服务器上。 Git LFS的处理方式类似于.gitignore 12git lfs installgit lfs track \"*.png\" 一切似乎都非常美好，然而悲伤的是，我的博客是基于Github/Coding Page的，所以图片必须上传到repo里，否则似乎无法显示QAQ，因此Git-LFS的方案只能暂时弃置。 Typora与Hexo的对接整了一个小脚本，可以把Typora中写好的东西打上分类，标签导入_post文件夹里（包括图片）详见Typora2hexo.py","link":"/2020/01/18/同时在Github与Coding上部署Hexo/"},{"title":"博客开张","text":"「Gavin的碎碎念~」开张^^关于为什么开这个博客平时也会用Typora写一些东西，写的多了，查阅起来就不是很方便了。因此我就想到利用Hexo+Github Page建立一个静态博客，一方面省去了服务器的开支，另一方面可以利用现成的模板设计去实现类似于查找，归类，时间线的功能，省去了自己重复开发的时间。没有的功能自己魔改也并不麻烦。于是乎，「Gavin的碎碎念~」就诞生了：） 博客里会有些啥嘞所谓碎碎念，就是啥都会谈一些。内容不局限于以下 技术文档（最近在刷leetcode可能也会写一些例题相关ORZ） 生活分享与一些小随笔 游戏的体验评测（八方旅人ing，或许也会有音乐，电影，书籍这些，根本就很少看书了好伐） 练琴（Guitar &amp; Keyboard）的心得体会以及一些基础乐理的笔记 flag Finally从「Gavin的碎碎念~」开始，养成做完事后复盘的好习惯，接受一切监督QAQ。绝不咕咕咕。","link":"/2020/01/17/博客开张/"},{"title":"leetcode137","text":"只出现一次数字Ⅱ给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 设计一个状态转移电路使得三次转换后能回到原始状态00-&gt;01-&gt;10-&gt;00。 先整一个状态转移矩阵 a b x new_a new_b 0 0 1 0 1 0 1 1 1 0 1 0 1 0 0 0 0 0 0 0 0 1 0 0 1 1 0 0 1 0 画b的卡诺图 x\\ab 00 01 11 10 1 1 0 X 0 0 0 1 X 0 b = (b ^ x) &amp; ~a 画a的卡诺图 x\\ab 00 01 11 10 1 0 1 X 0 0 0 0 X 1 a = (x &amp; b) | (~x &amp; a) 12345678910111213class Solution {public: int singleNumber(vector&lt;int&gt;&amp; nums) { int a = 0, b = 0; int tmp; for (auto x : nums) { tmp = b; b = (b ^ x) &amp; ~a; a = (x &amp; tmp) | (~x &amp; a); } return b; }}; 由于代码的实现中，每一位的计算并不是并行进行的，所以可以通过画一个行列由a,new_b,x构成的卡诺图来利用先生成的位。 x\\a new_b 00 01 11 10 1 1 0 X 0 0 0 0 X 1 a = (x ^ a) &amp; ~ new_b 12345678int singleNumber(vector&lt;int&gt;&amp; nums) { int a = 0, b = 0; for (auto x : nums) { b = (b ^ x) &amp; ~a; a = (a ^ x) &amp; ~b; } return b;}","link":"/2020/01/31/leetcode137/"},{"title":"leetcode148","text":"排序链表在 $O(n \\log n)$ 时间复杂度和常数级空间复杂度下，对链表进行排序。 注意到常数空间复杂度，递归的算法就可以先排除掉了。 一个简单的想法是自下而上地归并，函数cut(head, step)从头部截取step长度的子列表并返回下一段列表的起始节点。merge合并两个列表并返回尾部节点。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */class Solution {private: ListNode* cut(ListNode* head, int step) // divide a sublist with length 'step' off the list { if(!head) return NULL; ListNode* p = head; while(p-&gt;next &amp;&amp; step-1) { p = p-&gt;next; step--; } ListNode *tmp = p-&gt;next; p-&gt;next = NULL; return tmp; } ListNode* merge(ListNode* r, ListNode* list1, ListNode* list2) { ListNode* p = list1; ListNode* q = list2; while(p || q) { if(!q) { r-&gt;next = p; while(p-&gt;next) p = p-&gt;next; return p; } else if(!p) { r-&gt;next = q; while(q-&gt;next) q = q-&gt;next; return q; } if(p-&gt;val &gt; q-&gt;val) { r-&gt;next = q; q = q-&gt;next; } else { r-&gt;next = p; p = p-&gt;next; } r = r-&gt;next; r-&gt;next = NULL; } return r; }public: ListNode* sortList(ListNode* head) { if(!head) return NULL; ListNode* dum = new ListNode(-1); dum-&gt;next = head; int step = 1; ListNode* pre = dum; ListNode* cur = head; int cnt = 0; while(1) { pre = dum; cur = dum-&gt;next; cnt = 0; while(cur) { ListNode* first = cur; ListNode* second = cut(cur, step); cur = cut(second, step); pre = merge(pre, first, second); cnt++; } if(cnt == 1) break; step *= 2; } return dum-&gt;next; }};","link":"/2020/02/03/leetcode148/"},{"title":"leetcode149","text":"支线上最多的点数给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。 从一个基点出发，遍历其他的点（$O(n^2)$），分别计算 与基点重合点的数量（same） 经过基点不同斜率的直线上的点数（dict[slope]） 取第一项的值与第二项中的最大值（max_count）之和为基点对应极大值，在遍历过程中更新结果。 我们的遍历是建立在确定的基点上的，因此只需斜率就可以唯一确定一条直线。考虑到浮点数的精度问题，我转而考虑用辗转相除法将dx,dy约化为最简形式并以pair的形式存储。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Solution {private: // x &lt; y int gcd(int x, int y) { return x == 0 ? y : gcd(y % x, x); } pair&lt;int,int&gt; getSlope(int x1, int y1, int x2, int y2) { int dx = x1 - x2; int dy = y1 - y2; if(dy == 0) return {y1, 0}; if(dx == 0) return {0, x1}; int d = gcd(dx, dy); return {dy / d, dx / d}; }public: int maxPoints(vector&lt;vector&lt;int&gt;&gt;&amp; points) { if(points.size() &lt; 3) return points.size(); int len = points.size(); //int same = 0; int res = 2; for(int i = 0; i &lt; len; i++) { int same = 1; int max_count = 0; map&lt;pair&lt;int,int&gt;, int&gt; dict; for(int j = i+1; j &lt; len; j++) { if(points[j][0] == points[i][0] &amp;&amp; points[j][1] == points[i][1]) { same++; } else { pair&lt;int, int&gt; slope = getSlope(points[i][0], points[i][1], points[j][0], points[j][1]); if(!dict.count(slope)) dict[slope] = 1; else dict[slope]++; max_count = max(max_count, dict[slope]); } } res = max(res, same + max_count); } return res; }};","link":"/2020/02/03/leetcode149/"}],"tags":[{"name":"backtrack","slug":"backtrack","link":"/tags/backtrack/"},{"name":"BFS","slug":"BFS","link":"/tags/BFS/"},{"name":"hash","slug":"hash","link":"/tags/hash/"},{"name":"path","slug":"path","link":"/tags/path/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"AJAX","slug":"AJAX","link":"/tags/AJAX/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"get","slug":"get","link":"/tags/get/"},{"name":"post","slug":"post","link":"/tags/post/"},{"name":"greedy","slug":"greedy","link":"/tags/greedy/"},{"name":"dp","slug":"dp","link":"/tags/dp/"},{"name":"palindrome","slug":"palindrome","link":"/tags/palindrome/"},{"name":"subsequence","slug":"subsequence","link":"/tags/subsequence/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"域名","slug":"域名","link":"/tags/域名/"},{"name":"状态转移电路","slug":"状态转移电路","link":"/tags/状态转移电路/"},{"name":"位运算","slug":"位运算","link":"/tags/位运算/"},{"name":"链表","slug":"链表","link":"/tags/链表/"},{"name":"归并","slug":"归并","link":"/tags/归并/"},{"name":"斜率","slug":"斜率","link":"/tags/斜率/"}],"categories":[{"name":"文档","slug":"文档","link":"/categories/文档/"},{"name":"leetcode","slug":"文档/leetcode","link":"/categories/文档/leetcode/"},{"name":"博客搭建","slug":"文档/博客搭建","link":"/categories/文档/博客搭建/"},{"name":"web","slug":"文档/web","link":"/categories/文档/web/"},{"name":"随笔","slug":"随笔","link":"/categories/随笔/"}]}